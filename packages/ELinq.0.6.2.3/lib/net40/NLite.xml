<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NLite</name>
    </assembly>
    <members>
        <member name="T:NLite.AliasNameAttribute">
            <summary>
            别名注解,可以对领域服务或者领域方法启个别名
            </summary>
        </member>
        <member name="M:NLite.AliasNameAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="aliasNames">别名</param>
        </member>
        <member name="P:NLite.AliasNameAttribute.AliasNames">
            <summary>
            别名
            </summary>
        </member>
        <member name="T:NLite.Binding.BindAttribute">
            <summary>
            绑定注解,可以绑定在Class、结构、参数上
            </summary>
        </member>
        <member name="M:NLite.Binding.BindAttribute.IsPropertyAllowed(System.String)">
            <summary>
            判断指定的属性是否支持绑定
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Binding.BindAttribute.Exclude">
            <summary>
            排除的成员列表，用逗号分隔
            </summary>
        </member>
        <member name="P:NLite.Binding.BindAttribute.Include">
            <summary>
            包含的成员列表，用逗号分隔
            </summary>
        </member>
        <member name="P:NLite.Binding.BindAttribute.Prefix">
            <summary>
            得到或设置成员前缀
            </summary>
        </member>
        <member name="T:NLite.Binding.BindingInfo">
            <summary>
            绑定元数据类
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.Name">
            <summary>
            绑定的成员名称
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.Type">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.DefaultValue">
            <summary>
            缺省值
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.Exclude">
            <summary>
            排除项列表
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.Include">
            <summary>
            包含项列表
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.Prefix">
            <summary>
            成员前缀
            </summary>
        </member>
        <member name="F:NLite.Binding.BindingInfo.ModelBinder">
            <summary>
            模型绑定器
            </summary>
        </member>
        <member name="M:NLite.Binding.BindingInfo.#ctor(System.Reflection.ParameterInfo)">
            <summary>
            构造参数模型绑定器元数据
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:NLite.Binding.BindingInfo.#ctor(System.String,System.Type,System.Object)">
            <summary>
            构造模型绑定器
            </summary>
            <param name="name">成员名称</param>
            <param name="binderType">成员类型</param>
            <param name="defaultValue">缺省值</param>
        </member>
        <member name="M:NLite.Binding.BindingInfo.BindModel(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行模型绑定
            </summary>
            <param name="valueProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Binding.BindingInfo.FilterValueProvider(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            过滤ValueProvider
            </summary>
            <param name="valueProvider"></param>
        </member>
        <member name="T:NLite.Binding.CustomModelBinderAttribute">
            <summary>
            自定义模型绑定器注解
            </summary>
        </member>
        <member name="M:NLite.Binding.CustomModelBinderAttribute.GetBinder">
            <summary>
            得到模型绑定器
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLite.Binding.DefaultModelBinder">
            <summary>
            缺省模型绑定器
            </summary>
        </member>
        <member name="T:NLite.Binding.IModelBinder">
            <summary>
            模型绑定器接口
            </summary>
        </member>
        <member name="M:NLite.Binding.IModelBinder.BindModel(NLite.Binding.BindingInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行模型绑定
            </summary>
            <param name="bindingInfo">绑定元数据</param>
            <param name="valueProvider">valueProvider</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Binding.DefaultModelBinder.BindModel(NLite.Binding.BindingInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行模型绑定
            </summary>
            <param name="bindingInfo"></param>
            <param name="valueProvider"></param>
            <returns></returns>
        </member>
        <member name="F:NLite.Binding.DefaultModelBinder.DictionaryInfo.Type">
            <summary>
            Dictionary Type
            </summary>
        </member>
        <member name="T:NLite.Binding.ModelBinders">
            <summary>
            模型绑定器字典
            </summary>
        </member>
        <member name="F:NLite.Binding.ModelBinders.Binders">
            <summary>
            绑定器列表
            </summary>
        </member>
        <member name="M:NLite.Binding.ModelBinders.RegisterBinder``2(``1)">
            <summary>
            注册模型绑定器
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TBinder"></typeparam>
            <param name="binder"></param>
        </member>
        <member name="M:NLite.Binding.ModelBinders.GetBinder(System.Type)">
            <summary>
            得到指定类型的模型绑定器
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Cache.ICache">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Cache.ICache.ContainsKey(System.Object)">
            <summary>
            
            </summary>
            <modelExp name="key"></modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Cache.ICache.Remove(System.Object)">
            <summary>
            
            </summary>
            <modelExp name="key"></modelExp>
        </member>
        <member name="M:NLite.Cache.ICache.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Cache.ICache.Insert(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheDependency"></param>
        </member>
        <member name="M:NLite.Cache.ICache.Insert(System.String,System.Object,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheDependency"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="M:NLite.Cache.ICache.Insert(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="absoluteExpiration"></param>
            <param name="slidingExpiration"></param>
        </member>
        <member name="P:NLite.Cache.ICache.Item(System.Object)">
            <summary>
            
            </summary>
            <modelExp name="key"></modelExp>
            <returns></returns>
        </member>
        <member name="P:NLite.Cache.ICache.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Cache.CacheManager">
            <summary>
            缓存管理器
            </summary>
        </member>
        <member name="F:NLite.Cache.CacheManager.DefaultCacheName">
            <summary>
            缺省缓存名称
            </summary>
        </member>
        <member name="F:NLite.Cache.CacheManager.Caches">
            <summary>
            缓存容器集合
            </summary>
        </member>
        <member name="P:NLite.Cache.CacheManager.Cache">
            <summary>
            缺省缓存容器
            </summary>
        </member>
        <member name="T:NLite.Cfg.Configuration">
            <summary>
            系统配置对象
            </summary>
        </member>
        <member name="T:NLite.CompoistionObject`1">
            <summary>
            可组合的可扩展对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NLite.ExtensibleObject`1">
            <summary>
            可扩展对象
            </summary>
            <typeparam name="T">扩展点</typeparam>
        </member>
        <member name="T:NLite.IExtensibleObject`1">
            <summary>
            可扩展对象接口
            </summary>
            <typeparam name="T">扩展</typeparam>
        </member>
        <member name="M:NLite.IExtensibleObject`1.Add(NLite.IExtension{`0})">
            <summary>
            添加扩展点
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:NLite.IExtensibleObject`1.Remove(NLite.IExtension{`0})">
            <summary>
            移除扩展点
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:NLite.IExtensibleObject`1.Clear">
            <summary>
            清空所有扩展点
            </summary>
        </member>
        <member name="P:NLite.IExtensibleObject`1.Items">
            <summary>
            得到所有扩展点集合
            </summary>
        </member>
        <member name="P:NLite.IExtensibleObject`1.Count">
            <summary>
            扩展点数量
            </summary>
        </member>
        <member name="M:NLite.ExtensibleObject`1.#ctor">
            <summary>
            缺省构造函数
            </summary>
        </member>
        <member name="M:NLite.ExtensibleObject`1.Clear">
            <summary>
            清空所有扩展点
            </summary>
        </member>
        <member name="M:NLite.ExtensibleObject`1.Add(NLite.IExtension{`0})">
            <summary>
            添加扩展点
            </summary>
            <param name="extension"></param>
        </member>
        <member name="M:NLite.ExtensibleObject`1.Add``1">
            <summary>
            添加扩展点
            </summary>
            <typeparam name="E"></typeparam>
        </member>
        <member name="M:NLite.ExtensibleObject`1.Remove(NLite.IExtension{`0})">
            <summary>
            移除扩展点
            </summary>
            <param name="extension"></param>
        </member>
        <member name="P:NLite.ExtensibleObject`1.Items">
            <summary>
            得到所有扩展点集合
            </summary>
        </member>
        <member name="P:NLite.ExtensibleObject`1.Count">
            <summary>
            扩展点数量
            </summary>
        </member>
        <member name="T:NLite.ICompositionObject`1">
            <summary>
            可组合的可扩展对象接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NLite.IExtension`1">
            <summary>
            扩展点接口，用来扩展可扩展对象的
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLite.IExtension`1.Attach(`0)">
            <summary>
            用当前扩展点来扩展可扩展对象
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.IExtension`1.Detach(`0)">
            <summary>
            从可扩展对象中移除当前扩展点
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.CompoistionObject`1.Attach(`0)">
            <summary>
            用当前扩展点来扩展可扩展对象
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.CompoistionObject`1.Detach(`0)">
            <summary>
            从可扩展对象中移除当前扩展点
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.Cfg.Configuration.Configure">
            <summary>
            配置DI容器
            </summary>
        </member>
        <member name="T:NLite.Cfg.MessageBusConfigurationItem">
            <summary>
            消息总线配置节点
            </summary>
        </member>
        <member name="T:NLite.Extension`1">
            <summary>
            扩展点基类
            </summary>
            <typeparam name="T">可扩展对象</typeparam>
        </member>
        <member name="M:NLite.Extension`1.Attach(`0)">
            <summary>
            安装扩展点
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.Extension`1.Detach(`0)">
            <summary>
            卸载扩展点
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.Cfg.MessageBusConfigurationItem.Attach(NLite.Cfg.Configuration)">
            <summary>
            安装消息总线
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.Cfg.MessageBusConfigurationItem.Detach(NLite.Cfg.Configuration)">
            <summary>
            卸载消息总线
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="T:NLite.Cfg.MiniContainerConfigurationItem">
            <summary>
            Mini容器配置节点
            </summary>
        </member>
        <member name="M:NLite.Cfg.MiniContainerConfigurationItem.Attach(NLite.Cfg.Configuration)">
            <summary>
            配置DI容器
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.Cfg.MiniContainerConfigurationItem.Detach(NLite.Cfg.Configuration)">
            <summary>
            卸载DI容器
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="T:NLite.Cfg.ExceptionConfigurationItem">
            <summary>
            异常配置节点
            </summary>
        </member>
        <member name="M:NLite.Cfg.ExceptionConfigurationItem.#ctor(System.Action{NLite.IServiceRegistry})">
            <summary>
            
            </summary>
            <param name="registerHandler"></param>
        </member>
        <member name="M:NLite.Cfg.ExceptionConfigurationItem.Attach(NLite.Cfg.Configuration)">
            <summary>
            配置异常
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="M:NLite.Cfg.ExceptionConfigurationItem.Detach(NLite.Cfg.Configuration)">
            <summary>
            卸载异常配置
            </summary>
            <param name="cfg"></param>
        </member>
        <member name="T:NLite.Collections.CollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.Combine``1(``0,``0,``0[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item1"></param>
            <param name="item2"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.Combine``1(``0,``0[])">
            <summary>
            combination helper method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="item"></param>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.Exists``1(System.Linq.IQueryable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queryable"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.TrueForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll"></param>
            <param name="action"></param>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
            <param name="coll"></param>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.Exist``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="coll"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.In``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="t"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.CollectionExtensions.ToCSV``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <param name="delim"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Collections.IDataCollection">
            <summary>
            数据状态集合对象，主要用来解耦Asp.net内置的状态对象，如：Session，Application，Cache等
            </summary>
        </member>
        <member name="M:NLite.Collections.IDataCollection.ContainsKey(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.IDataCollection.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:NLite.Collections.IDataCollection.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.IDataCollection.Item(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Collections.IDataCollection.Count">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Collections.IApplication">
            <summary>
            ApplicationState 接口，用来解耦Asp.net内置的ApplicationState
            </summary>
        </member>
        <member name="T:NLite.Collections.ISession">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Collections.IDataContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.IDataContext.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Collections.IPropertySet">
            <summary>
            属性集接口
            </summary>
        </member>
        <member name="M:NLite.Collections.IPropertySet.Get``1(System.String)">
            <summary>
            通过属性名得到属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.IPropertySet.Get``1(System.String,``0)">
            <summary>
            通过属性名得到属性值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.IPropertySet.Contains(System.String)">
            <summary>
            判断属性集中是否包含特定的属性名
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.IPropertySet.Remove(System.String)">
            <summary>
            通过属性名移除属性
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.IPropertySet.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Collections.IPropertySet.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="P:NLite.Collections.IPropertySet.Item(System.String)">
            <summary>
            通过属性名得到或设置属性值
            </summary>
            <param name="propertyName">属性名</param>
            <returns></returns>
        </member>
        <member name="P:NLite.Collections.IPropertySet.Keys">
            <summary>
            返回所有的属性Key
            </summary>
        </member>
        <member name="P:NLite.Collections.IPropertySet.Count">
            <summary>
            返回属性的数量
            </summary>
        </member>
        <member name="E:NLite.Collections.IPropertySet.PropertyChanged">
            <summary>
            属性改变事件
            </summary>
        </member>
        <member name="T:NLite.Collections.PropertySet">
            <summary>
            属性集对象
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.#ctor">
            <summary>
            构造属性集对象
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.#ctor(System.StringComparer)">
            <summary>
            构造属性集对象
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:NLite.Collections.PropertySet.#ctor(NLite.Collections.IPropertySet)">
            <summary>
            构造属性集对象
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:NLite.Collections.PropertySet.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:NLite.Collections.PropertySet.Contains(System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.TryGetPropertyValue(System.Type,System.String,System.Object@)">
            <summary>
            
            </summary>
            <param name="toType"></param>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.Get``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.AcceptChanges">
            <summary>
            Accept change
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.RejectChanges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="newValue"></param>
            <param name="oldValue"></param>
        </member>
        <member name="M:NLite.Collections.PropertySet.BeginEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.CancelEdit">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Collections.PropertySet.IsRestore">
            <summary>
            是否在还原状态
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.EndEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#Generic#IDictionary{System#String@System#Object}#ContainsKey(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#Generic#IDictionary{System#String@System#Object}#Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.TryGetValue(System.String,System.Object@)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NLite.Collections.PropertySet.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#Clear">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.Item(System.String)">
            <summary>
            
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Collections.PropertySet.Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.IsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="E:NLite.Collections.PropertySet.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.IsEdit">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.System#Collections#Generic#IDictionary{System#String@System#Object}#Keys">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.System#Collections#Generic#IDictionary{System#String@System#Object}#Values">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Collections.PropertySet.System#Collections#Generic#IDictionary{System#String@System#Object}#Item(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.ComponentModel.ComponentObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ComponentModel.LocalizedObject">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.BooleanDisposable">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.IBooleanDisposable">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.IBooleanDisposable.IsDisposed">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.BooleanDisposable.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.BooleanDisposable.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.BooleanDisposable.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NLite.BooleanDisposable.CheckNotDisposed">
            <summary>
            检查对象是否还没有被释放
            </summary>
            <exception cref="T:System.ObjectDisposedException">如果对象已经释放则触发该异常</exception>
        </member>
        <member name="P:NLite.BooleanDisposable.IsDisposed">
            <summary>
            判断当前对象是否释放
            </summary>
        </member>
        <member name="T:NLite.Globalization.ISupportGlobalization">
            <summary>
            国际化接口
            </summary>
        </member>
        <member name="T:NLite.Globalization.ILanguageChangedListner">
            <summary>
            语言更改舰艇器接口
            </summary>
        </member>
        <member name="T:NLite.IListener">
            <summary>
            监听器接口
            </summary>
            <remarks>充当观察者模式中的抽象观察者角色</remarks>
        </member>
        <member name="M:NLite.Globalization.ILanguageChangedListner.RefreshResource">
            <summary>
            刷新国际化资源
            </summary>
        </member>
        <member name="M:NLite.Globalization.ISupportGlobalization.InitializeResource">
            <summary>
            初始化国际化资源
            </summary>
        </member>
        <member name="P:NLite.Globalization.ISupportGlobalization.IsSupportGlobalization">
            <summary>
            是否支持国际化
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedObject.InitializeResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedObject.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="F:NLite.ComponentModel.ComponentObject.IsRestore">
            <summary>
            是否在还原状态
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.AcceptChanges">
            <summary>
            Accept change
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.RejectChanges">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.OnPropertyChanged(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="newValue"></param>
            <param name="oldValue"></param>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.PopulateValue``1(System.String,``0,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="propertyName"></param>
            <param name="newValue"></param>
            <param name="oldValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.BeginEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.CancelEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.EndEdit">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.ComponentObject.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="E:NLite.ComponentModel.ComponentObject.PropertyChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.ComponentObject.IsChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.ComponentObject.IsEdit">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.EnumAttribute">
            <summary>
            Enum 标签类
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.DefaultDescription">
            <summary>
            得到或设置枚举项缺省描述
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.Order">
            <summary>
            得到或设置枚举项序号
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.ResourceKey">
            <summary>
            得到或设置资源Key
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.Name">
            <summary>
            得到枚举项名称
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.OriginalValue">
            <summary>
            得到枚举项的值
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.Value">
            <summary>
            得到枚举项的整数值
            </summary>
        </member>
        <member name="P:NLite.EnumAttribute.Description">
            <summary>
            得到枚举项描述
            </summary>
        </member>
        <member name="T:NLite.ComponentModel.EnumTypeConverter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.EnumTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentModel.EnumTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.IgnoreAttribute">
            <summary>
            Description of IgnoreAttribute.
            </summary>
        </member>
        <member name="T:NLite.ComponentModel.LocalTypeDescriptionProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.LocalTypeDescriptionProvider.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.LocalTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="objectType"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.ComponentModel.LocalizedPropertyAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyAttribute.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyAttribute.Category">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ComponentModel.LocalizedPropertyDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.ComponentModel.LocalizedPropertyDescriptor._descriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="basePropertyDescriptor"></param>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedPropertyDescriptor.GetValue(System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentModel.LocalizedPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="component"></param>
            <param name="value"></param>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyDescriptor.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyDescriptor.Description">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyDescriptor.Category">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyDescriptor.ComponentType">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyDescriptor.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.LocalizedPropertyDescriptor.PropertyType">
            <summary>
            /
            </summary>
        </member>
        <member name="T:NLite.ComponentModel.EnumLocalizePropertyDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.EnumLocalizePropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            
            </summary>
            <param name="basePropertyDescriptor"></param>
        </member>
        <member name="P:NLite.ComponentModel.EnumLocalizePropertyDescriptor.Converter">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ComponentModel.PropertyChangedEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ComponentModel.PropertyChangedEventArgs.#ctor(System.String,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName"></param>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="P:NLite.ComponentModel.PropertyChangedEventArgs.NewValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ComponentModel.PropertyChangedEventArgs.OldValue">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Data.DataReaderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Data.DataReaderExtensions.ToDataTable(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <modelExp name="reader"></modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.DataReaderExtensions.ToList``1(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <modelExp name="reader"></modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.DataReaderExtensions.ToList``1(System.Data.IDataReader,System.Func{System.Data.IDataReader,``0})">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <modelExp name="reader"></modelExp>
            <modelExp name="creator"></modelExp>
            <returns></returns>
        </member>
        <member name="T:NLite.Data.DataTableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Data.DataTableExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <modelExp name="tb"></modelExp>
            <returns></returns>
        </member>
        <member name="T:NLite.SortOrder">
            <summary>
            排序标志
            </summary>
        </member>
        <member name="F:NLite.SortOrder.Ascending">
            <summary>
            升序
            </summary>
        </member>
        <member name="F:NLite.SortOrder.Descending">
            <summary>
            降序
            </summary>
        </member>
        <member name="T:NLite.Data.IPagination">
            <summary>
            分页记录集接口
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.TotalRowCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.StartRowIndex">
            <summary>
            起始行索引号（从0开始）
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.PageIndex">
            <summary>
            页面索引号（从0开始）
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.PageNumber">
            <summary>
            页面编号（从1开始）
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.Length">
            <summary>
            当前页面记录数
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.PageCount">
            <summary>
            总页面数 
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.HasPagination">
            <summary>
            是否可以进行分页（分页条件是PageCount > 1)
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.HasPrevious">
            <summary>
            是否支持上一页
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.HasNext">
            <summary>
            是否支持下一页
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.HasFirst">
            <summary>
            是否首页
            </summary>
        </member>
        <member name="P:NLite.Data.IPagination.HasLast">
            <summary>
            是否末页
            </summary>
        </member>
        <member name="T:NLite.Data.IPagination`1">
            <summary>
            泛型分页记录集接口
            </summary>
        </member>
        <member name="M:NLite.Data.Pagination.#ctor(System.Collections.IEnumerable,System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <modelExp name="collection">Local 数据源</modelExp>
            <modelExp name="pageIndex">页面索引号，下标从0开始</modelExp>
            <modelExp name="pageSize">页面大小</modelExp>
        </member>
        <member name="P:NLite.Data.Pagination.TotalRowCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.StartRowIndex">
            <summary>
            起始行索引号（从0开始）
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.PageIndex">
            <summary>
            页面索引号（从0开始）
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.PageNumber">
            <summary>
            页面编号（从1开始）
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.PageCount">
            <summary>
            总页面数 
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.Length">
            <summary>
            当前页面记录数
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.HasPagination">
            <summary>
            是否可以进行分页（分页条件是PageCount > 1)
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.HasPrevious">
            <summary>
            是否支持上一页
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.HasNext">
            <summary>
            是否支持下一页
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.HasFirst">
            <summary>
            是否首页
            </summary>
        </member>
        <member name="P:NLite.Data.Pagination.HasLast">
            <summary>
            是否末页
            </summary>
        </member>
        <member name="T:NLite.Data.Pagination`1">
            <summary>
            泛型分页记录集对象
            </summary>
        </member>
        <member name="M:NLite.Data.Pagination`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataSource">Remote 数据源</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:NLite.Data.Pagination`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <modelExp name="collection">Local 数据源</modelExp>
            <modelExp name="pageIndex">页面索引号，下标从0开始</modelExp>
            <modelExp name="pageSize">页面大小</modelExp>
        </member>
        <member name="M:NLite.Data.Pagination`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="F:NLite.Data.Pagination`1.Empty">
            <summary>
            空记录集对象
            </summary>
        </member>
        <member name="T:NLite.Data.QueryableExtensions">
            <summary>
            集合的扩展类
            </summary>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.ToPagination``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            将数据源转会为分页记录集
            </summary>
            <typeparam name="T"></typeparam>
            <modelExp name="dataSource">Remote数据源</modelExp>
            <modelExp name="pageIndex">页面索引号（下标从0开始）</modelExp>
            <modelExp name="pageSize">页面大小</modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.ToPagination``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            将数据源转会为分页记录集
            </summary>
            <typeparam name="T"></typeparam>
            <modelExp name="dataSource">Local数据源</modelExp>
            <modelExp name="pageIndex">页面索引号（下标从0开始）</modelExp>
            <modelExp name="pageSize">页面大小</modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.ToPaination(System.Data.DataTable,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dataTable">local datatable</param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="rowCount"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,NLite.SortOrder)">
            <summary>
            对数据源进行排序
            </summary>
            <typeparam name="T"></typeparam>
            <modelExp name="dataSource">Remote数据源</modelExp>
            <modelExp name="propertyName">排序列</modelExp>
            <modelExp name="sortOrder">排序方向</modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{NLite.Dynamic.Filter})">
            <summary>
            使IQueryable支持动态查询
            </summary>
            <typeparam name="TEntity"></typeparam>
            <modelExp name="dataSource">Remote 数据源</modelExp>
            <modelExp name="filters">filters对象</modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.Where``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{NLite.Dynamic.Filter},System.String)">
            <summary>
            使IQueryable支持动态查询
            </summary>
            <typeparam name="TEntity"></typeparam>
            <modelExp name="dataSource">Remote 数据源</modelExp>
            <modelExp name="filters">filters对象</modelExp>
            <modelExp name="prefix">使用前缀区分查询条件</modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryableExtensions.ToPagination``1(System.Linq.IQueryable{``0},NLite.Data.QueryContext)">
            <summary>
            将数据源转会为分页记录集
            </summary>
            <typeparam name="T"></typeparam>
            <modelExp name="dataSource">Remote数据源</modelExp>
            <modelExp name="ctx">查询上下文对象</modelExp>
            <returns></returns>
        </member>
        <member name="T:NLite.Data.QueryContext`1">
            <summary>
            查询上下文
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:NLite.Data.QueryContext`1.PageSize">
            <summary>
            页面大小
            </summary>
        </member>
        <member name="P:NLite.Data.QueryContext`1.PageIndex">
            <summary>
            页面索引号
            </summary>
        </member>
        <member name="P:NLite.Data.QueryContext`1.Property">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="P:NLite.Data.QueryContext`1.SortOrder">
            <summary>
            排序方向
            </summary>
        </member>
        <member name="P:NLite.Data.QueryContext`1.Data">
            <summary>
            查询条件数据
            </summary>
        </member>
        <member name="T:NLite.Data.QueryContext">
            <summary>
            查询上下文
            </summary>
        </member>
        <member name="T:NLite.Data.DefaultQuerySettings">
            <summary>
            缺省查询参数设置
            </summary>
        </member>
        <member name="M:NLite.Data.DefaultQuerySettings.Configure">
            <summary>
            配置查询的缺省参数设置
            </summary>
        </member>
        <member name="M:NLite.Data.DefaultQuerySettings.Configure(NLite.Data.DefaultQuerySettings)">
            <summary>
            配置查询的缺省参数设置
            </summary>
            <modelExp name="setting"></modelExp>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.PageSize">
            <summary>
             设置缺省页面大小为，默认为10
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.AscendingValue">
            <summary>
            缺省升序值，默认为"asc"
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.DescendingValue">
            <summary>
            缺省降序值，默认为"asc"
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.PageSizeName">
            <summary>
            页面大小参数名称，默认ps
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.PageIndexName">
            <summary>
            页面索引号参数名称，默认pi
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.SortPropertyName">
            <summary>
            排序列参数名称，默认sp
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.SortOrderName">
            <summary>
            排序方向参数名称，默认so
            </summary>
        </member>
        <member name="F:NLite.Data.DefaultQuerySettings.PageIndexIsFromZero">
            <summary>
            页面索引号是否从0开始，默认是true
            </summary>
        </member>
        <member name="T:NLite.Data.QueryContextBinder">
            <summary>
            查询上下文模型绑定器
            </summary>
        </member>
        <member name="M:NLite.Data.QueryContextBinder.#ctor(NLite.Data.DefaultQuerySettings)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NLite.Data.QueryContextBinder.NLite#Binding#IModelBinder#BindModel(NLite.Binding.BindingInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            模型绑定
            </summary>
            <modelExp name="bindingInfo"></modelExp>
            <modelExp name="valueProvider"></modelExp>
            <returns></returns>
        </member>
        <member name="M:NLite.Data.QueryContextBinder.ParseSortProperty(System.Collections.Generic.IDictionary{System.String,System.Object},NLite.Data.QueryContext)">
            <summary>
            解析排序列参数
            </summary>
            <modelExp name="valueProvider"></modelExp>
            <modelExp name="ctx"></modelExp>
        </member>
        <member name="M:NLite.Data.QueryContextBinder.ParseSortOrder(NLite.Data.QueryContext,System.String)">
            <summary>
            解析排序方向
            </summary>
            <modelExp name="ctx"></modelExp>
            <modelExp name="strValue"></modelExp>
        </member>
        <member name="T:NLite.ICompositeDisposable">
            <summary>
            可复合的Disposable对象接口
            </summary>
        </member>
        <member name="M:NLite.ICompositeDisposable.AddDisposable(System.IDisposable)">
            <summary>
            添加Disposable对象
            </summary>
            <param name="item"></param>
        </member>
        <member name="T:NLite.CompositeDisposable">
            <summary>
            可复合的Disposable对象
            </summary>
        </member>
        <member name="M:NLite.CompositeDisposable.#ctor">
            <summary>
            构造对象
            </summary>
        </member>
        <member name="M:NLite.CompositeDisposable.#ctor(System.Int32)">
            <summary>
            构造对象
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:NLite.CompositeDisposable.AddDisposable(System.IDisposable)">
            <summary>
            添加Disposable对象
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NLite.CompositeDisposable.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:NLite.Disposable">
            <summary>
            Disposable对象
            </summary>
        </member>
        <member name="F:NLite.Disposable.Empty">
            <summary> 
            得到空Disposable对象
            </summary>
        </member>
        <member name="M:NLite.Disposable.Create(System.Action)">
            <summary>
            创建Disposable对象
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Disposable.Create(System.Object,System.Action)">
            <summary>
            创建Disposable对象
            </summary>
            <param name="target"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.IDisposeCollector">
            <summary>
            资源回收器接口
            </summary>
        </member>
        <member name="P:NLite.IDisposeCollector.Disposes">
            <summary>
            可回收的资源列表
            </summary>
        </member>
        <member name="T:NLite.Dynamic.QueryModel">
            <summary>
            用户自动收集搜索条件的Model
            </summary>
        </member>
        <member name="T:NLite.Dynamic.QueryModelBinder">
            <summary>
            查询模型绑定器
            </summary>
        </member>
        <member name="M:NLite.Dynamic.QueryModelBinder.BindModel(NLite.Binding.BindingInfo,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            执行模型绑定
            </summary>
            <param name="bindingInfo"></param>
            <param name="valueProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.QueryModelBinder.AddSearchItem(NLite.Dynamic.QueryModel,System.String,System.Object)">
            <summary>
            将一组key=value添加入QueryModel.Items
            </summary>
            <param name="model">QueryModel</param>
            <param name="key">当前项的HtmlName</param>
            <param name="val">当前项的值</param>
        </member>
        <member name="T:NLite.Dynamic.Filter">
            <summary>
            查询条件
            </summary>
        </member>
        <member name="P:NLite.Dynamic.Filter.Field">
            <summary>
            字段
            </summary>
        </member>
        <member name="P:NLite.Dynamic.Filter.Operation">
            <summary>
            操作
            </summary>
        </member>
        <member name="P:NLite.Dynamic.Filter.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:NLite.Dynamic.Filter.Prefix">
            <summary>
            前缀，用于标记作用域，HTML中使用()进行标识
            </summary>
        </member>
        <member name="P:NLite.Dynamic.Filter.OrGroup">
            <summary>
            如果使用Or组合，则此组组合为一个Or序列,HTML中使用{}进行标识
            </summary>
        </member>
        <member name="T:NLite.Dynamic.OperationType">
            <summary>
            操作枚举
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.Equal">
            <summary>
            等于
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.Less">
            <summary>
            小于
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.Greater">
            <summary>
            大于
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.LessOrEqual">
            <summary>
            小于等于
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.GreaterOrEqual">
            <summary>
            大于等于
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.Like">
            <summary>
            Like
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.DateBlock">
            <summary>
            输入一个时间获取当前天的时间块操作, ToSql未实现，仅实现了IQueryable
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.Contains">
            <summary>
            处理Like的问题
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.StdIn">
            <summary>
            处理In的问题
            </summary>
        </member>
        <member name="F:NLite.Dynamic.OperationType.DateTimeLessThanOrEqual">
            <summary>
            处理Datetime小于+23h59m59s999f的问题
            </summary>
        </member>
        <member name="T:NLite.Dynamic.FilterSettings">
            <summary>
            条件设置类
            </summary>
        </member>
        <member name="M:NLite.Dynamic.FilterSettings.Configure(NLite.Dynamic.FilterSettings)">
            <summary>
            设置确实操作名称
            </summary>
            <param name="op"></param>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.OperationBeginFlag">
            <summary>
            操作符起始标识,默认是'['
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.PrefixBeginFlag">
            <summary>
            前缀起始标识，默认是'('
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.OrGroupBeginFlag">
            <summary>
            Or组起始标识，默认是'{'
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.Equal">
            <summary>
            等于,缺省值为eq
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.Less">
            <summary>
            小于,缺省值为lt
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.Greater">
            <summary>
            大于,缺省值为gt
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.LessOrEqual">
            <summary>
            小于等于,缺省值为le
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.GreaterOrEqual">
            <summary>
            大于等于,缺省值为ge
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.In">
            <summary>
            In,缺省值为in
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.NotEqual">
             <summary>
            不等于 ,缺省值为ne
             </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.BeginWith">
             <summary>
            BeginWith ,缺省值为bw
             </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.EndWith">
            <summary>
            EndWith,缺省值为ew
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.Contains">
            <summary>
            处理Contains的问题,缺省值为cn
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.NotBeginWith">
             <summary>
            NotBeginWith ,缺省值为nbw
             </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.NotEndWith">
             <summary>
            NotEndWith ,缺省值为new
             </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.NotContains">
            <summary>
            NotContains,缺省值为nc
            </summary>
        </member>
        <member name="F:NLite.Dynamic.FilterSettings.NotIn">
            <summary>
            NotIn,缺省值为ni
            </summary>
        </member>
        <member name="P:NLite.Dynamic.FilterSettings.Current">
            <summary>
            返回当前实例
            </summary>
        </member>
        <member name="T:NLite.Dynamic.ITransformProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.ITransformProvider.Match(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.ITransformProvider.Transform(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Dynamic.InTransformProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.InTransformProvider.Match(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.InTransformProvider.Transform(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Dynamic.OrGroupTransformProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Dynamic.TransformProviders">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.TransformProviders.SetProviders(NLite.Dynamic.ITransformProvider[])">
            <summary>
            
            </summary>
            <param name="providers"></param>
        </member>
        <member name="P:NLite.Dynamic.TransformProviders.Items">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Dynamic.DateBlockTransformProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.DateBlockTransformProvider.Match(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.DateBlockTransformProvider.Transform(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Dynamic.UnixTimeTransformProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.UnixTimeTransformProvider.Match(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.UnixTimeTransformProvider.Transform(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Dynamic.LikeTransformProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.LikeTransformProvider.Match(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.LikeTransformProvider.Transform(NLite.Dynamic.Filter,System.Type)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Dynamic.ConjunctionOperator">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Dynamic.ConjunctionOperator.And">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Dynamic.ConjunctionOperator.Or">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Dynamic.QueryableSearcher`1.ChangeType(System.Object,System.Type)">
            <summary>
            类型转换，支持非空类型与可空类型之间的转换
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Dynamic.QueryableSearcher`1.ChangeTypeToExpression(NLite.Dynamic.Filter,System.Type)">
            <summary>
            转换SearchItem中的Value的类型，为表达式树
            </summary>
            <param name="item"></param>
            <param name="conversionType">目标类型</param>
        </member>
        <member name="M:NLite.Dynamic.TypeUtil.GetUnNullableType(System.Type)">
            <summary>
            获取可空类型的实际类型
            </summary>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Dynamic.UnixTime">
            <summary>
            Unix 时间
            </summary>
        </member>
        <member name="M:NLite.Dynamic.UnixTime.FromUnixTime(System.Int64)">
            <summary>
            将unixtime转换为.NET的DateTime
            </summary>
            <param name="timeStamp">秒数</param>
            <returns>转换后的时间</returns>
        </member>
        <member name="M:NLite.Dynamic.UnixTime.FromDateTime(System.DateTime)">
            <summary>
            将.NET的DateTime转换为unix time
            </summary>
            <param name="dateTime">待转换的时间</param>
            <returns>转换后的unix time</returns>
        </member>
        <member name="T:System.Linq.PredicateBuilder">
            <summary>
            See http://www.albahari.com/expressions for information and examples.
            </summary>
        </member>
        <member name="T:NLite.EnumHelper">
            <summary>
            Author:qswang
            Create:2008-11-28
            Function:
            </summary>
        </member>
        <member name="M:NLite.EnumHelper.Parse``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.EnumHelper.Parse``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.EnumHelper.GetDescription(System.Enum)">
            <summary>
            
            </summary>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.EnumHelper.GetEnumDescriptions(System.Type)">
            <summary>
            
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Enum`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NLite.DateFormat">
            <summary>
            Format strings for commonly-used date formats
            </summary>
        </member>
        <member name="F:NLite.DateFormat.Iso8601">
            <summary>
            .NET format string for ISO 8601 date format
            </summary>
        </member>
        <member name="F:NLite.DateFormat.RoundTrip">
            <summary>
            .NET format string for roundtrip date format
            </summary>
        </member>
        <member name="T:NLite.NLiteException">
            <summary>
            Represents errors that occur in the framework.
            </summary>
        </member>
        <member name="M:NLite.NLiteException.#ctor">
            <summary>
            Initializes a new instance of the <c>NLiteException</c> class.
            </summary>
        </member>
        <member name="M:NLite.NLiteException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>NLiteException</c> class with the specified
            error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:NLite.NLiteException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <c>NLiteException</c> class with the specified
            error message and the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The inner exception that is the cause of this exception.</param>
        </member>
        <member name="M:NLite.NLiteException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="P:NLite.NLiteException.ErrorState">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ExceptionService">
            <summary>
            异常的扩展类
            </summary>
        </member>
        <member name="M:NLite.ExceptionService.Handle(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:NLite.ExceptionService.Handle``1(System.Exception,System.String)">
            <summary>
            处理异常
            </summary>
            <typeparam name="TNewExcption"></typeparam>
            <param name="ex"></param>
            <param name="message"></param>
        </member>
        <member name="M:NLite.ExceptionService.Handle``1(System.Exception)">
            <summary>
            处理异常
            </summary>
            <typeparam name="TNewExcption"></typeparam>
            <param name="ex"></param>
        </member>
        <member name="T:NLite.IExceptionHandler">
            <summary>
            Represents that the implemented classes are exception handlers.
            </summary>
        </member>
        <member name="M:NLite.IExceptionHandler.HandleException(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:NLite.IExceptionResolver">
            <summary>
            异常解析器接口
            </summary>
        </member>
        <member name="M:NLite.IExceptionResolver.HasSupport(System.Exception)">
            <summary>
            是否支持特定类型异常的解析
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IExceptionResolver.HandleException(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:NLite.IExceptionResolver.Order">
            <summary>
            解析器的顺序
            </summary>
        </member>
        <member name="P:NLite.IExceptionResolver.ExceptionCode">
            <summary>
            异常代码字典
            </summary>
        </member>
        <member name="P:NLite.IExceptionResolver.ExceptionRenders">
            <summary>
            异常呈现器集合
            </summary>
        </member>
        <member name="T:NLite.IExceptionRender">
            <summary>
            异常呈现器
            </summary>
        </member>
        <member name="M:NLite.IExceptionRender.RenderException(System.Int32,System.Exception)">
            <summary>
            呈现异常
            </summary>
            <param name="code">异常代码</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:NLite.IExceptionCode">
            <summary>
            异常代码字典接口
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.Success">
            <summary>
            成功的代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.UnknowExceptionCode">
            <summary>
            未知异常的代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.DbExceptionStart">
            <summary>
            Db异常范围-开始代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.DbExceptionEnd">
            <summary>
            Db异常范围-结束代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.QueryException">
            <summary>
            查询异常的代号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.PersistenceException">
            <summary>
            持久化（增删改）的异常代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.InsertException">
            <summary>
            添加的异常代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.DeleteException">
            <summary>
            删除的异常代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.UpdateException">
            <summary>
            更新的异常代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.DomainExceptionStart">
            <summary>
            领域服务的异常范围-开始代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.DomainExceptionEnd">
            <summary>
            领域服务的异常范围-结束代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.CustomExceptionStart">
            <summary>
            自定义的异常范围-开始代码编号
            </summary>
        </member>
        <member name="P:NLite.IExceptionCode.CustomExceptionEnd">
            <summary>
            自定义的异常范围-结束代码编号
            </summary>
        </member>
        <member name="T:NLite.ExceptionCode">
            <summary>
             异常代码字典
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.Success">
            <summary>
            成功的代码编号，缺省是1
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.UnknowExceptionCode">
            <summary>
            未知异常的代码编号，缺省是-1
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.DbExceptionStart">
            <summary>
            Db异常范围-20000开始
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.DbExceptionEnd">
            <summary>
            Db异常范围-29999结束
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.QueryException">
            <summary>
            查询异常代码：20001
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.PersistenceException">
            <summary>
            持久化异常代码：20002
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.InsertException">
            <summary>
            添加异常代码：20003
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.DeleteException">
            <summary>
            删除异常代码：20004
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.UpdateException">
            <summary>
            更新异常代码：20005
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.DomainExceptionStart">
            <summary>
            领域异常范围-30000开始
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.DomainExceptionEnd">
            <summary>
            领域异常范围-59999结束
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.CustomExceptionStart">
            <summary>
            自定义异常范围-60000开始
            </summary>
        </member>
        <member name="P:NLite.ExceptionCode.CustomExceptionEnd">
            <summary>
            自定义异常范围-99999结束
            </summary>
        </member>
        <member name="T:NLite.ExceptionHandler">
            <summary>
            异常处理器
            </summary>
        </member>
        <member name="M:NLite.ExceptionHandler.HandleException(System.Exception)">
            <summary>
            处理异常，按照解析器的Order从小到大进行排序然后依次处理
            </summary>
            <param name="ex"></param>
        </member>
        <member name="P:NLite.ExceptionHandler.Resolvers">
            <summary>
            得到异常解析器集合
            </summary>
        </member>
        <member name="T:NLite.ExceptionResolver">
            <summary>
            异常解析器基类
            </summary>
        </member>
        <member name="M:NLite.ExceptionResolver.HasSupport(System.Exception)">
            <summary>
            是否支持特定类型异常的解析
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ExceptionResolver.OnResolve(System.Exception)">
            <summary>
            解析异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:NLite.ExceptionResolver.HandleException(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:NLite.ExceptionResolver.RenderException(System.Int32,System.Exception)">
            <summary>
            呈现异常
            </summary>
            <param name="code"></param>
            <param name="ex"></param>
        </member>
        <member name="P:NLite.ExceptionResolver.ExceptionCode">
            <summary>
            异常代码字典
            </summary>
        </member>
        <member name="P:NLite.ExceptionResolver.ExceptionRenders">
            <summary>
            异常呈现器集合
            </summary>
        </member>
        <member name="P:NLite.ExceptionResolver.Order">
            <summary>
            异常解析器Order
            </summary>
        </member>
        <member name="T:NLite.UnknowExceptionResolver">
            <summary>
            未知异常解析器
            </summary>
        </member>
        <member name="M:NLite.UnknowExceptionResolver.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NLite.UnknowExceptionResolver.HasSupport(System.Exception)">
            <summary>
            支持所有异常
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.UnknowExceptionResolver.OnResolve(System.Exception)">
            <summary>
            解析异常
            </summary>
            <param name="ex"></param>
        </member>
        <member name="T:NLite.DebugExceptionRender">
            <summary>
            Debug异常呈现器
            </summary>
        </member>
        <member name="M:NLite.DebugExceptionRender.RenderException(System.Int32,System.Exception)">
            <summary>
            呈现异常
            </summary>
            <param name="code"></param>
            <param name="ex"></param>
        </member>
        <member name="T:NLite.LogExceptionReander">
            <summary>
            日志异常呈现器
            </summary>
        </member>
        <member name="M:NLite.LogExceptionReander.RenderException(System.Int32,System.Exception)">
            <summary>
            呈现异常
            </summary>
            <param name="code"></param>
            <param name="ex"></param>
        </member>
        <member name="T:NLite.ExceptionManager">
            <summary>
            异常管理器
            </summary>
        </member>
        <member name="M:NLite.ExceptionManager.HandleException(System.Exception)">
            <summary>
            处理异常
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ExceptionManager.HandleException``1(``0)">
            <summary>
            处理异常
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ExceptionManager.HandleAndWrapper``1(System.String)">
            <summary>
            处理并包装异常
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ExceptionManager.ThrowNew``1(System.Exception,System.String)">
            <summary>
            抛出新异常
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ExceptionManager.HandleAndWrapper``1(System.Exception,System.String)">
            <summary>
            处理并包装异常
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="ex"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Globalization.ILanguageManager">
            <summary>
            语言更改监听管理器接口
            </summary>
        </member>
        <member name="T:NLite.IListenerManager`1">
            <summary>
            监听管理器接口
            </summary>
            <typeparam name="TListener">监听器类型</typeparam>
            <remarks>观察者模式中的抽象主题角色</remarks>
        </member>
        <member name="M:NLite.IListenerManager`1.Register(`0[])">
            <summary>
            注册监听器
            </summary>
            <param name="listeners">监听器集合</param>
        </member>
        <member name="M:NLite.IListenerManager`1.UnRegister(`0[])">
            <summary>
            注销监听器
            </summary>
            <param name="listeners">监听器集合</param>
        </member>
        <member name="M:NLite.IListenerManager`1.Clear">
            <summary>
            清空所有监听管理器
            </summary>
        </member>
        <member name="P:NLite.IListenerManager`1.Listeners">
            <summary>
            监听管理器集合
            </summary>
        </member>
        <member name="P:NLite.IListenerManager`1.Count">
            <summary>
            监听器数量
            </summary>
        </member>
        <member name="P:NLite.Globalization.ILanguageManager.Language">
            <summary>
            得到或设置语言
            </summary>
        </member>
        <member name="T:NLite.Globalization.IResourceItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.IResourceItem.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Globalization.IResourceItem.BaseResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.IResourceItem.ResourceFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.IResourceItem.AssemblyFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Globalization.ResourceItem">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceItem.Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Globalization.ResourceItem.System#ICloneable#Clone">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Globalization.ResourceItem.BaseResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceItem.ResourceFile">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceItem.AssemblyFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Globalization.IResourceLocator`1">
            <summary>
            资源定位器接口
            </summary>
            <typeparam name="TResource">资源类型</typeparam>
        </member>
        <member name="M:NLite.Globalization.IResourceLocator`1.Get(System.String)">
            <summary>
            通过资源名称得到指定的资源对象
            </summary>
            <param name="name">资源名称</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Globalization.IResourceRegistry">
            <summary>
            资源注册表接口
            </summary>
        </member>
        <member name="M:NLite.Globalization.IResourceRegistry.Register(System.Collections.Generic.IEnumerable{NLite.Globalization.IResourceItem},System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="asm"></param>
        </member>
        <member name="M:NLite.Globalization.IResourceRegistry.Register(NLite.Globalization.IResourceItem,System.Reflection.Assembly)">
            <summary>
            根据ResourceItem 决定是注册文件资源或者程序集资源
            </summary>
            <param name="item"></param>
            <param name="asm"></param>
        </member>
        <member name="M:NLite.Globalization.IResourceRegistry.Register(System.String,System.Reflection.Assembly)">
            <summary>
            注册Assembly资源
            </summary>
            <param name="baseResourceName"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:NLite.Globalization.IResourceRegistry.Register(System.String)">
            <summary>
            注册文件资源
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:NLite.Globalization.IResourceRegistry.Register(System.IO.Stream)">
            <summary>
            注册流资源
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:NLite.Globalization.IResourceRepository">
            <summary>
            资源指责库接口
            </summary>
        </member>
        <member name="M:NLite.Globalization.IResourceRepository.Register(System.String,NLite.Globalization.IResourceRegistry)">
            <summary>
            注册资源注册表
            </summary>
            <param name="key">注册表名称</param>
            <param name="resourceMgr">注册表</param>
        </member>
        <member name="M:NLite.Globalization.IResourceRepository.Get(System.String)">
            <summary>
            得到资源注册表
            </summary>
            <param name="key">注册表名称</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Globalization.IResourceRepository.Get``1(System.String)">
            <summary>
            得到资源定位器
            </summary>
            <typeparam name="TResource">资源定位器名称</typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Globalization.LanguageManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ListenerManager`1">
            <summary>
            监听管理器
            </summary>
            <typeparam name="TListener">监听器类型</typeparam>
            <remarks>观察者模式中的抽象主题角色</remarks>
        </member>
        <member name="M:NLite.ListenerManager`1.#ctor">
            <summary>
            构造
            </summary>
        </member>
        <member name="M:NLite.ListenerManager`1.OnAfterRegister(`0)">
            <summary>
            在监听管理器注册后触发
            </summary>
            <param name="listner"></param>
        </member>
        <member name="M:NLite.ListenerManager`1.OnAfterUnRegister(`0)">
            <summary>
            在监听管理器卸载后触发
            </summary>
            <param name="listner"></param>
        </member>
        <member name="M:NLite.ListenerManager`1.Register(`0[])">
            <summary>
            注册监听器
            </summary>
            <param name="listeners">监听器集合</param>
        </member>
        <member name="M:NLite.ListenerManager`1.UnRegister(`0[])">
            <summary>
            注销监听器
            </summary>
            <param name="listeners">监听器集合</param>
        </member>
        <member name="M:NLite.ListenerManager`1.ForEach(System.Action{`0})">
            <summary>
            
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:NLite.ListenerManager`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NLite.ListenerManager`1.Clear">
            <summary>
            清空所有监听管理器
            </summary>
        </member>
        <member name="P:NLite.ListenerManager`1.Listeners">
            <summary>
            监听管理器集合
            </summary>
        </member>
        <member name="P:NLite.ListenerManager`1.Count">
            <summary>
            监听器数量
            </summary>
        </member>
        <member name="M:NLite.Globalization.LanguageManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Globalization.LanguageManager.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.LanguageManager.Language">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Globalization.ResourceManager`1">
            <summary>
            资源管理器
            </summary>
            <typeparam name="TResource"></typeparam>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="resourceDirectory"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Register(System.String)">
            <summary>
            注册文件资源
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Register(System.IO.Stream)">
            <summary>
            注册流资源
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Register(System.String,System.Reflection.Assembly)">
            <summary>
            注册Assembly资源
            </summary>
            <param name="baseResourceName"></param>
            <param name="assembly"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Register(System.Collections.Generic.IEnumerable{NLite.Globalization.IResourceItem},System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="items"></param>
            <param name="asm"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Register(NLite.Globalization.IResourceItem,System.Reflection.Assembly)">
            <summary>
            根据ResourceItem 决定是注册文件资源或者程序集资源
            </summary>
            <param name="item"></param>
            <param name="asm"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.RefreshResource">
            <summary>
            刷新资源
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.ClearResources">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.LoadLocalResources">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Get(System.String)">
            <summary>
            通过资源名称得到指定的资源对象
            </summary>
            <param name="name">资源名称</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Globalization.ResourceManager`1.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:NLite.Globalization.ResourceManager`1.Resources">
            <summary>
            资源集合
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceManager`1.DefaultResourceName">
            <summary>
            得到缺省资源名称
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceManager`1.FileResources">
            <summary>
            文件资源列表
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceManager`1.AssemblyResources">
            <summary>
            程序集资源列表
            </summary>
        </member>
        <member name="T:NLite.Globalization.ResourceManager`1.AssemblyResource">
            <summary>
            程序集资源
            </summary>
        </member>
        <member name="T:NLite.Globalization.ResourceNotFoundException">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceNotFoundException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceRepository.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Globalization.ResourceRepository.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceRepository.RefreshResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Globalization.ResourceRepository.Register(System.String,NLite.Globalization.IResourceRegistry)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="resourceMgr"></param>
        </member>
        <member name="M:NLite.Globalization.ResourceRepository.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Globalization.ResourceRepository.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TResource"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Globalization.ResourceRepository.StringRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceRepository.Strings">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceRepository.ImageRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceRepository.IconRegistry">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceRepository.Images">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Globalization.ResourceRepository.Icons">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ICommand">
            <summary>
            无参数命令接口
            </summary>
        </member>
        <member name="M:NLite.ICommand.Execute">
            <summary>
            执行命令方法
            </summary>
        </member>
        <member name="T:NLite.ICompositeCommand">
            <summary>
            复合命令接口
            </summary>
        </member>
        <member name="M:NLite.ICompositeCommand.Add(NLite.ICommand)">
            <summary>
            添加命令
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="T:NLite.ICommand`1">
            <summary>
            有参数命令接口
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:NLite.ICommand`1.Execute(`0)">
            <summary>
            执行命令
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.ICommand`2">
            <summary>
            命令接口
            </summary>
            <typeparam name="TContext">命令上下文参数</typeparam>
            <typeparam name="TReturnValue">返回值</typeparam>
        </member>
        <member name="M:NLite.ICommand`2.Execute(`0)">
            <summary>
            执行命令
            </summary>
            <param name="ctx">命令上下文参数</param>
            <returns></returns>
        </member>
        <member name="T:NLite.IInitializable">
            <summary>
            初始化接口
            </summary>
        </member>
        <member name="M:NLite.IInitializable.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="T:NLite.Initializer">
            <summary>
            初始化器
            </summary>
        </member>
        <member name="M:NLite.Initializer.#ctor">
            <summary>
            构造初始化器
            </summary>
        </member>
        <member name="M:NLite.Initializer.OnInitializing">
            <summary>
            在初始化前触发
            </summary>
        </member>
        <member name="M:NLite.Initializer.OnInitialized">
            <summary>
            在初始化后触发
            </summary>
        </member>
        <member name="M:NLite.Initializer.OnExceptionFired(System.Exception)">
            <summary>
            异常发生时触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:NLite.Initializer.OrderAttribute">
            <summary>
            用来标识一个方法的执行的顺序
            </summary>
        </member>
        <member name="F:NLite.Initializer.OrderAttribute.Order">
            <summary>
            序号
            </summary>
        </member>
        <member name="M:NLite.Initializer.OrderAttribute.#ctor(System.UInt32)">
            <summary>
            
            </summary>
            <param name="order">方法执行的顺序</param>
        </member>
        <member name="T:NLite.AbstractInitializer">
            <summary>
            抽象初始化器
            </summary>
        </member>
        <member name="T:NLite.Listener">
            <summary>
            监听器
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Fluent.IAspectExpression">
            <summary>
            切面表达式
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IAspectExpression.PointCut">
            <summary>
            得到切点表达式
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IAspectExpression.PointCut(NLite.Interceptor.Metadata.CutPointFlags)">
            <summary>
            得到切点表达式
            </summary>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IAspectExpression.ToAspect">
            <summary>
            得到切面表达式
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Fluent.INamespaceExpression">
            <summary>
            命名空间表达式
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Fluent.INamespaceExpression.Exclude``1">
            <summary>
            排除特定的类型
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Fluent.IPointCutExpression">
            <summary>
            切点表达式
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Fluent.IAdviceExpression">
            <summary>
            拦截器表达式
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IAdviceExpression.Advice``1">
            <summary>
            注册特定的拦截器
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IPointCutExpression.Method(System.String)">
            <summary>
            匹配特定的方法
            </summary>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IPointCutExpression.Method">
            <summary>
            匹配特定的方法
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Fluent.IMethodSignatureExpression">
            <summary>
            方法签名表达式
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IMethodSignatureExpression.Deep(System.Int32)">
            <summary>
            方法深度
            </summary>
            <param name="deep"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IMethodSignatureExpression.Argument(System.String)">
            <summary>
            方法参数
            </summary>
            <param name="argument"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IMethodSignatureExpression.Access(NLite.Interceptor.Metadata.AccessFlags)">
            <summary>
            方法访问权限
            </summary>
            <param name="access"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Fluent.IMethodSignatureExpression.ReturnType(System.String)">
            <summary>
            方法返回值类型
            </summary>
            <param name="methodType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.AdviceType">
            <summary>
            Advice Type
            </summary>
        </member>
        <member name="F:NLite.Interceptor.AdviceType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.AdviceType.Before">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.AdviceType.After">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.AdviceType.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.AdviceType.Around">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.AdviceType.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.IInterceptor">
            <summary>
            拦截器接口
            </summary>
        </member>
        <member name="M:NLite.Interceptor.IInterceptor.OnInvocationExecuting(NLite.Interceptor.IInvocationExecutingContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.IInterceptor.OnInvocationExecuted(NLite.Interceptor.IInovacationExecutedContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.IInterceptor.OnException(NLite.Interceptor.IInvocationExceptionContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.Interceptor.IInvocationContext">
            <summary>
            调用上下文
            </summary>
        </member>
        <member name="P:NLite.Interceptor.IInvocationContext.Target">
            <summary>
            目标对象
            </summary>
        </member>
        <member name="P:NLite.Interceptor.IInvocationContext.Method">
            <summary>
            目标方法
            </summary>
        </member>
        <member name="P:NLite.Interceptor.IInvocationContext.Arguments">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="T:NLite.Interceptor.IInvocationExecutingContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.IInovacationExecutedContext">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.IInovacationExecutedContext.Result">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.IInvocationExceptionContext">
            <summary>
            异常调用上下文
            </summary>
        </member>
        <member name="P:NLite.Interceptor.IInvocationExceptionContext.Exception">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.IInvocationExceptionContext.ExceptionHandled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.DefaultInterceptor">
            <summary>
            缺省拦截器
            </summary>
        </member>
        <member name="M:NLite.Interceptor.DefaultInterceptor.OnInvocationExecuting(NLite.Interceptor.IInvocationExecutingContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.DefaultInterceptor.OnInvocationExecuted(NLite.Interceptor.IInovacationExecutedContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.DefaultInterceptor.OnException(NLite.Interceptor.IInvocationExceptionContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.Interceptor.InterceptorBroker">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Interceptor.InterceptorBroker.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Interceptor.InterceptorBroker.OnInvocationExecuting(NLite.Interceptor.IInvocationExecutingContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.InterceptorBroker.OnInvocationExecuted(NLite.Interceptor.IInovacationExecutedContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.InterceptorBroker.OnException(NLite.Interceptor.IInvocationExceptionContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.Interceptor.Aspect">
            <summary>
            切面工厂类
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Aspect.FromNamespace(System.String)">
            <summary>
            定义命名空间切面
            </summary>
            <param name="namespace"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Aspect.For``1">
            <summary>
            定义类型切面
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Aspect.For(System.Type)">
            <summary>
            定义类型切面
            </summary>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.IInterceptorRepository">
            <summary>
            拦截器仓储接口
            </summary>
        </member>
        <member name="M:NLite.Interceptor.IInterceptorRepository.Get(System.Reflection.MethodInfo)">
            <summary>
            得到指定方法上的所有拦截器
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.InterceptorRepository">
            <summary>
            拦截器仓储
            </summary>
        </member>
        <member name="M:NLite.Interceptor.InterceptorRepository.Get(System.Reflection.MethodInfo)">
            <summary>
            得到指定方法上的所有拦截器
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.LoggerInterceptor">
            <summary>
            日志拦截器
            </summary>
        </member>
        <member name="M:NLite.Interceptor.LoggerInterceptor.OnInvocationExecuting(NLite.Interceptor.IInvocationExecutingContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.LoggerInterceptor.OnInvocationExecuted(NLite.Interceptor.IInovacationExecutedContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Interceptor.LoggerInterceptor.OnException(NLite.Interceptor.IInvocationExceptionContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="P:NLite.Interceptor.LoggerInterceptor.Level">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Matcher.AspectMatcher">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Matcher.IAspectMatcher">
            <summary>
            切面匹配器接口
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Matcher.IAspectMatcher.RegisterClassMatcher``2">
            <summary>
            注册类型匹配器
            </summary>
            <typeparam name="TTargetTypeInfo"></typeparam>
            <typeparam name="TClassMatcher"></typeparam>
        </member>
        <member name="M:NLite.Interceptor.Matcher.IAspectMatcher.Match(System.Type,System.Collections.Generic.IEnumerable{NLite.Interceptor.Metadata.IAspectInfo})">
            <summary>
            在指定的切面集合中匹配特定的目标类型
            </summary>
            <param name="targetType">目标类型</param>
            <param name="aspects">切面集合</param>
            <returns>返回匹配的切面集合</returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.AspectMatcher.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Matcher.AspectMatcher.RegisterClassMatcher``2">
            <summary>
            
            </summary>
            <typeparam name="TTargetTypeInfo"></typeparam>
            <typeparam name="TClassMatcher"></typeparam>
        </member>
        <member name="M:NLite.Interceptor.Matcher.AspectMatcher.Match(System.Type,System.Collections.Generic.IEnumerable{NLite.Interceptor.Metadata.IAspectInfo})">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="aspects"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Matcher.IClassMatcher">
            <summary>
            类型匹配器接口
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Matcher.IClassMatcher.Match(System.Type,NLite.Interceptor.Metadata.IAspectInfo)">
            <summary>
            判断指定的切面是否匹配特定的目标类型
            </summary>
            <param name="targetType">目标类型</param>
            <param name="aspect">切面</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Matcher.IJoinPointMatcher">
            <summary>
            连接点匹配器/方法匹配器接口
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Matcher.IJoinPointMatcher.Match(System.Type,System.Reflection.MethodInfo)">
            <summary>
            计算目标方法所匹配的切点集合
            </summary>
            <param name="targetType"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Matcher.JoinPointMatcher">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.#ctor(System.Collections.Generic.IEnumerable{NLite.Interceptor.Metadata.ICutPointInfo})">
            <summary>
            
            </summary>
            <param name="pointcuts"></param>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.Match(System.Type,System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="targetType"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.NameMatch(NLite.Interceptor.Metadata.IMethodSignature,System.Reflection.MethodInfo,NLite.Interceptor.Metadata.CutPointFlags)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <param name="method"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.ReturnTypeMatch(NLite.Interceptor.Metadata.IMethodSignature,System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.AccessMatch(NLite.Interceptor.Metadata.IMethodSignature,System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.ArgumentsMatch(NLite.Interceptor.Metadata.IMethodSignature,System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.TypeMatch(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="argSignature"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.NormalizeTypeName(System.String)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Matcher.JoinPointMatcher.FlagsMatchMethodType(System.Reflection.MethodInfo,NLite.Interceptor.Metadata.IMethodSignature)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="pointcut"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Metadata.CutPointFlags">
            <summary>
            切点类型
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.CutPointFlags.Unspecified">
            <summary>
            未指定
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.CutPointFlags.Method">
            <summary>
            方法
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.CutPointFlags.Property">
            <summary>
            属性
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.CutPointFlags.PropertyRead">
            <summary>
            只读属性
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.CutPointFlags.PropertyWrite">
            <summary>
            只写属性
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.CutPointFlags.All">
            <summary>
            全部
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.AccessFlags">
            <summary>
            访问权限类型
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.AccessFlags.Public">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.AccessFlags.Protected">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Interceptor.Metadata.AccessFlags.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.IAspectInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IAspectInfo.TargetType">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IAspectInfo.PointCuts">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.IAspectRepository">
            <summary>
            切面仓储接口
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Metadata.IAspectRepository.Register(NLite.Interceptor.Metadata.IAspectInfo)">
            <summary>
            注册切面
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IAspectRepository.Aspects">
            <summary>
            切面列表
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.AspectRepository">
            <summary>
            切面仓储
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Metadata.AspectRepository.Register(NLite.Interceptor.Metadata.IAspectInfo)">
            <summary>
            注册切面
            </summary>
            <param name="aspect"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Interceptor.Metadata.AspectRepository.Aspects">
            <summary>
            切面列表
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.IMethodSignature">
            <summary>
            方法签名
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IMethodSignature.Deep">
            <summary>
            方法深度
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IMethodSignature.Access">
            <summary>
            访问权限
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IMethodSignature.Arguments">
            <summary>
            方法参数
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IMethodSignature.Flags">
            <summary>
            切点类型
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IMethodSignature.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.IMethodSignature.ReturnType">
            <summary>
            返回类型
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.MethodSignatureExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Interceptor.Metadata.MethodSignatureExtensions.AllArguments(NLite.Interceptor.Metadata.IMethodSignature)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Metadata.MethodSignatureExtensions.AllMethods(NLite.Interceptor.Metadata.IMethodSignature)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Interceptor.Metadata.MethodSignatureExtensions.AllAccess(NLite.Interceptor.Metadata.IMethodSignature)">
            <summary>
            
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Interceptor.Metadata.ICutPointInfo">
            <summary>
            切点信息
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.ICutPointInfo.Signature">
            <summary>
            方法签名
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.ICutPointInfo.Advices">
            <summary>
            拦截器类型集合
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.ITargetTypeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.INamespaceTargetTypeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.INamespaceTargetTypeInfo.Namespace">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.INamespaceTargetTypeInfo.Excludes">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Interceptor.Metadata.ISingleTargetTypeInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Interceptor.Metadata.ISingleTargetTypeInfo.SingleType">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.Internal.Key.Make(System.Type)">
            <summary>
            通过类型得到一个Key
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.Internal.Key.Make(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.Internal.Key.Make``1">
            <summary>
            
            </summary>
            <typeparam name="TTarget"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.Internal.Key.Make``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="TTarget"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Messaging.Internal.Key.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.Key.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.Key.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.Key.Id">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ITagFormatProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ITagFormatProvider.Format(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="str"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.ITagFormatProvider.SupportColon">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ITagFormatProvider.Tag">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Text.Internal.PropertyFormatProvider">
            <summary>
            ${property:PropertyName}
            ${property:PropertyName??DefaultValue}
            </summary>
        </member>
        <member name="T:NLite.IPropertyManager">
            <summary>
            属性管理器接口
            </summary>
        </member>
        <member name="M:NLite.IPropertyManager.Load">
            <summary>
            加载属性集
            </summary>
        </member>
        <member name="M:NLite.IPropertyManager.Save">
            <summary>
            保存属性集
            </summary>
        </member>
        <member name="P:NLite.IPropertyManager.Properties">
            <summary>
            得到属性集
            </summary>
        </member>
        <member name="E:NLite.IPropertyManager.FileChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.IPropertyManager.EnableFileWatch">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.PropertyManager">
            <summary>
            属性管理器
            </summary>
        </member>
        <member name="M:NLite.PropertyManager.Init">
            <summary>
            初始化属性集
            </summary>
        </member>
        <member name="M:NLite.PropertyManager.Init(System.String)">
            <summary>
            初始化属性集
            </summary>
            <param name="propFile">属性文件</param>
        </member>
        <member name="M:NLite.PropertyManager.Get``1(System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.PropertyManager.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.PropertyManager.Load">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.PropertyManager.Save">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.PropertyManager.Properties">
            <summary>
            得到属性集
            </summary>
        </member>
        <member name="E:NLite.PropertyManager.FileChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.PropertyManager.EnableFileWatch">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.PropertyManager.Instance">
            <summary>
            得到属性管理器单利对象
            </summary>
        </member>
        <member name="P:NLite.PropertyManager.Items">
            <summary>
            得到属性管理器的属性集
            </summary>
        </member>
        <member name="T:NLite.IStartable">
            <summary>
            启动接口
            </summary>
        </member>
        <member name="M:NLite.IStartable.Start">
            <summary>
            启动
            </summary>
        </member>
        <member name="M:NLite.IStartable.Stop">
            <summary>
            停止
            </summary>
        </member>
        <member name="T:NLite.Lazy`1">
            <summary>
            Lazy对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLite.Lazy`1.#ctor">
            <summary>
            创建Lazy对象
            </summary>
        </member>
        <member name="M:NLite.Lazy`1.#ctor(System.Boolean)">
            <summary>
            创建Lazy对象
            </summary>
            <param name="isThreadSafe">是否线程安全</param>
        </member>
        <member name="M:NLite.Lazy`1.#ctor(System.Func{`0})">
            <summary>
            创建Lazy对象
            </summary>
            <param name="valueFactory">对象工厂</param>
        </member>
        <member name="M:NLite.Lazy`1.#ctor(System.Func{`0},System.Boolean)">
            <summary>
            创建Lazy对象
            </summary>
            <param name="valueFactory">对象工厂</param>
            <param name="isThreadSafe">是否线程安全</param>
        </member>
        <member name="P:NLite.Lazy`1.Value">
            <summary>
            得到对象值
            </summary>
        </member>
        <member name="T:NLite.Lazy`2">
            <summary>
            Lazy对象
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TMetadata">对象的元数据</typeparam>
        </member>
        <member name="M:NLite.Lazy`2.#ctor(System.Func{`0},`1)">
            <summary>
            创建Lazy对象
            </summary>
            <param name="valueFactory">对象工厂</param>
            <param name="metadata">对象元数据</param>
        </member>
        <member name="M:NLite.Lazy`2.#ctor(`1)">
            <summary>
            创建Lazy对象
            </summary>
            <param name="metadata">对象元数据</param>
        </member>
        <member name="M:NLite.Lazy`2.#ctor(`1,System.Boolean)">
            <summary>
            创建Lazy对象
            </summary>
            <param name="metadata">对象元数据</param>
            <param name="isThreadSafe">是否线程安全</param>
        </member>
        <member name="M:NLite.Lazy`2.#ctor(System.Func{`0},`1,System.Boolean)">
            <summary>
            创建Lazy对象
            </summary>
            <param name="valueFactory">对象工厂</param>
            <param name="metadata">对象元数据</param>
            <param name="isThreadSafe">是否线程安全</param>
        </member>
        <member name="P:NLite.Lazy`2.Metadata">
            <summary>
            对象元数据
            </summary>
        </member>
        <member name="T:NLite.Log.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:NLite.Log.ILog.Debug(System.Object)">
            <summary>
            记录调试信息
            </summary>
            <param id="message">消息</param>
        </member>
        <member name="M:NLite.Log.ILog.Debug(System.Object,System.Exception)">
            <summary>
            记录调试信息. 
            </summary>
            <param id="message">消息</param>
            <param id="exception">异常</param>
        </member>
        <member name="M:NLite.Log.ILog.DebugFormat(System.String,System.Object[])">
            <summary>
            记录调试信息.
            </summary>
            <param id="format">消息格式</param>
            <param id="args">消息格式化的参数数组</param>
        </member>
        <member name="M:NLite.Log.ILog.Info(System.Object)">
            <summary>
            记录信息
            </summary>
            <param id="message">消息</param>
        </member>
        <member name="M:NLite.Log.ILog.Info(System.Object,System.Exception)">
            <summary>
            记录信息 
            </summary>
            <param id="message">消息</param>
            <param id="exception">异常</param>
        </member>
        <member name="M:NLite.Log.ILog.InfoFormat(System.String,System.Object[])">
            <summary>
            记录信息
            </summary>
            <param id="format">消息格式</param>
            <param id="args">消息格式化的参数数组</param>
        </member>
        <member name="M:NLite.Log.ILog.Warn(System.Object)">
            <summary>
            记录警告信息
            </summary>
            <param id="message">消息</param>
        </member>
        <member name="M:NLite.Log.ILog.Warn(System.Object,System.Exception)">
            <summary>
            记录警告信息 
            </summary>
            <param id="message">消息</param>
            <param id="exception">异常</param>
        </member>
        <member name="M:NLite.Log.ILog.WarnFormat(System.String,System.Object[])">
            <summary>
            记录警告信息
            </summary>
            <param id="format">消息格式</param>
            <param id="args">消息格式化的参数数组</param>
        </member>
        <member name="M:NLite.Log.ILog.Error(System.Object)">
            <summary>
            记录错误信息
            </summary>
            <param id="message">消息</param>
        </member>
        <member name="M:NLite.Log.ILog.Error(System.Object,System.Exception)">
            <summary>
            记录错误信息 
            </summary>
            <param id="message">消息</param>
            <param id="exception">异常</param>
        </member>
        <member name="M:NLite.Log.ILog.ErrorFormat(System.String,System.Object[])">
            <summary>
            记录错误信息
            </summary>
            <param id="format">消息格式</param>
            <param id="args">消息格式化的参数数组</param>
        </member>
        <member name="M:NLite.Log.ILog.Fatal(System.Object)">
            <summary>
            记录致命错误信息
            </summary>
            <param id="message">消息</param>
        </member>
        <member name="M:NLite.Log.ILog.Fatal(System.Object,System.Exception)">
            <summary>
            记录致命错误信息
            </summary>
            <param id="message">消息</param>
            <param id="exception">异常</param>
        </member>
        <member name="P:NLite.Log.ILog.IsDebugEnabled">
            <summary>
            判断消息的优先级是否可以进行记录调试信息.
            </summary>
        </member>
        <member name="P:NLite.Log.ILog.IsInfoEnabled">
            <summary>
            判断消息的优先级是否可以进行记录信息.
            </summary>
        </member>
        <member name="P:NLite.Log.ILog.IsWarnEnabled">
            <summary>
            判断消息的优先级是否可以进行记录警告信息.
            </summary>
        </member>
        <member name="P:NLite.Log.ILog.IsErrorEnabled">
            <summary>
            判断消息的优先级是否可以进行记录错误信息.
            </summary>
        </member>
        <member name="P:NLite.Log.ILog.IsFatalEnabled">
            <summary>
            判断消息的优先级是否可以进行记录致命错误信息.
            </summary>
        </member>
        <member name="T:NLite.Log.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:NLite.Log.LogLevel.Debug">
            <summary>
            Debug
            </summary>
        </member>
        <member name="F:NLite.Log.LogLevel.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:NLite.Log.LogLevel.Warn">
            <summary>
            Warn
            </summary>
        </member>
        <member name="F:NLite.Log.LogLevel.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="F:NLite.Log.LogLevel.Fatal">
            <summary>
            Fatal
            </summary>
        </member>
        <member name="T:NLite.Log.LogManager">
            <summary>
            日志工厂类
            </summary>
        </member>
        <member name="M:NLite.Log.LogManager.CreateLogger(System.Type)">
            <summary>
            创建日志器
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Log.LogManager.CreateLogger(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Log.LogManager.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Log.LogManager.GetLogger(System.Type)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Log.LogManager.GetLogger(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Log.LogManager.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Log.Log4nLogManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Log.Log4nLogManager.CreateLogger(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Log.Log4nLogManager.CreateLogger(System.Type)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.LoopDependencyException">
            <summary>
            循环依赖异常
            </summary>
        </member>
        <member name="M:NLite.LoopDependencyException.#ctor">
            <summary>
            构造循环依赖异常对象
            </summary>
        </member>
        <member name="M:NLite.LoopDependencyException.#ctor(System.String)">
            <summary>
            构造循环依赖异常对象
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLite.LoopDependencyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造循环依赖异常对象
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="T:NLite.Converter">
            <summary>
            Converter 类，支持基本数据类型，以及Enum和Nullable数据类型间的相互转换
            </summary>
        </member>
        <member name="M:NLite.Converter.IsPrimitiveType(System.Type)">
            <summary>
            The primitive types are Boolean, Byte, SByte, Int16, UInt16, Int32, UInt32, Int64, UInt64, IntPtr, UIntPtr, Char, Double, Single,Decimal,DateTime,DBNull,Enum,Nullable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Converter.Convert``2(``0)">
            <summary>
            
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Converter.Convert(System.Object,System.Type)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mapping.Factories.MapperFactoryProvider">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.ClassMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.ClassToDictionaryMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.DictionaryToClassMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.ListSourceMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.CollectionMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.DataReaderMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.DataRowMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.DataTableMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.PrimitiveMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.TypeConverterMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.Factories.MapperFactoryProvider.DictionaryMapperFactory">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mapping.IMapperInfo">
            <summary>
            映射元数据接口
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapperInfo.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapperInfo.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapperInfo.IgnoreCase">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapperInfo.IgnoreSourceMembers">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapperInfo.IgnoreDestinationMembers">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapperInfo.IgnoreUnderscore">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mapping.IMappingEngine">
            <summary>
            映射引擎接口
            </summary> 
        </member>
        <member name="M:NLite.Mapping.IMappingEngine.CreateMapper``2">
            <summary>
            创建映射器
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="P:NLite.Mapping.IMappingEngine.MapperRegistry">
            <summary>
            得到映射器注册表
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMappingEngine.FactoryRegistry">
            <summary>
            得到映射器工厂注册表
            </summary>
        </member>
        <member name="T:NLite.Mapping.IMapper">
            <summary>
            映射器接口
            </summary>
        </member>
        <member name="M:NLite.Mapping.IMapper.Map(System.Object@,System.Object@)">
            <summary>
            把from对象映射到to对象中
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NLite.Mapping.IMapper.Map(System.Object,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mapping.IMapper.Info">
            <summary>
            得到映射器元数据信息
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapper.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mapping.IMapperRegistry">
            <summary>
            映射器注册表接口
            </summary>
        </member>
        <member name="T:NLite.Mapping.IMapperFactory">
            <summary>
            映射器工厂接口
            </summary>
        </member>
        <member name="M:NLite.Mapping.IMapperFactory.IsMatch(System.Type,System.Type)">
            <summary>
            是否支持fromType到toType的映射
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapperFactory.Create(System.Type,System.Type)">
            <summary>
            创建fromType到toType的映射器
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mapping.IMapperFactory.Order">
            <summary>
            序号
            </summary>
        </member>
        <member name="E:NLite.Mapping.IMapperFactory.OrderChanged">
            <summary>
            Order changed event
            </summary>
        </member>
        <member name="T:NLite.Mapping.MapperFactory">
            <summary>
            映射器工厂基类
            </summary>
        </member>
        <member name="M:NLite.Mapping.MapperFactory.IsMatch(System.Type,System.Type)">
            <summary>
            是否支持fromType到toType的映射
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.MapperFactory.Create(System.Type,System.Type)">
            <summary>
            创建fromType到toType的映射器
            </summary>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mapping.MapperFactory.Order">
            <summary>
            序号
            </summary>
        </member>
        <member name="E:NLite.Mapping.MapperFactory.OrderChanged">
            <summary>
            Order changed event
            </summary>
        </member>
        <member name="T:NLite.Mapping.IMapperFactoryRegistry">
            <summary>
            映射器工厂注册表
            </summary>
        </member>
        <member name="M:NLite.Mapping.IMapperFactoryRegistry.Register(NLite.Mapping.IMapperFactory)">
            <summary>
            注册MapperFactory
            </summary>
            <param name="mapperFactory"></param>
        </member>
        <member name="M:NLite.Mapping.IMapperFactoryRegistry.Unregister(NLite.Mapping.IMapperFactory)">
            <summary>
            注销MapperFactory
            </summary>
            <param name="mapperFactory"></param>
        </member>
        <member name="T:NLite.Mapping.IMapper`2">
            <summary>
            泛型映射器接口
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.IgnoreCase(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.IgnoreUnderscore(System.Boolean)">
            <summary>
            
            </summary>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.ForMember(System.Linq.Expressions.Expression{System.Func{`1,System.Object}},System.Func{`0,System.Object})">
            <summary>
            
            </summary>
            <param name="destinationMember"></param>
            <param name="memberOptions"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.IgnoreSourceMember(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.IgnoreDestinationMember(System.Linq.Expressions.Expression{System.Func{`1,System.Object}})">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.IgnoreSourceMembers(System.Func{System.Type,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.IgnoreDestinationMembers(System.Func{System.Type,System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.MatchMembers(System.Func{System.String,System.String,System.Boolean})">
            <summary>
            
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.ConvertUsing``2(System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="From"></typeparam>
            <typeparam name="To"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.BeforeMap(System.Action{`0,`1})">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.AfterMap(System.Action{`0,`1})">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.Map(`0)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapping.IMapper`2.Map(`0,`1@)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="P:NLite.Mapping.IMapper`2.Info">
            <summary>
            得到映射器元数据信息
            </summary>
        </member>
        <member name="P:NLite.Mapping.IMapper`2.State">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mapping.SpliteAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mapping.SpliteAttribute.Separator">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mapping.SpliteAttribute.#ctor(System.Char[])">
            <summary>
            
            </summary>
            <param name="separator"></param>
        </member>
        <member name="F:NLite.Mapping.Internal.DictionaryInfo.Type">
            <summary>
            Dictionary Type
            </summary>
        </member>
        <member name="T:NLite.Mapper">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mapper.Map(System.Object,System.Type,System.Type)">
            <summary>
            映射
            </summary>
            <param name="from"></param>
            <param name="fromType"></param>
            <param name="toType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapper.Map``2(``0)">
            <summary>
            映射
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapper.Map``2(``0,``1@)">
            <summary>
            映射
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:NLite.Mapper.CreateMapper``2">
            <summary>
            创建映射器
            </summary>
            <typeparam name="TFrom"></typeparam>
            <typeparam name="TTo"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Mapper.Reset">
            <summary>
            重置映射器引擎
            </summary>
        </member>
        <member name="P:NLite.Mapper.Current">
            <summary>
            得到当前活动的MappingEngine
            </summary>
        </member>
        <member name="P:NLite.Mapper.EnableErrorState">
            <summary>
            是否启用ErrorState进行跟踪
            </summary>
        </member>
        <member name="T:NLite.Messaging.SubscribeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.SubscribeAttribute.Mode">
            <summary>
            得到或设置订阅模式
            </summary>
        </member>
        <member name="P:NLite.Messaging.SubscribeAttribute.Topic">
            <summary>
            得到或设置消息主题
            </summary>
        </member>
        <member name="T:NLite.Messaging.SubscribeMode">
            <summary>
            消息订阅模式
            </summary>
        </member>
        <member name="F:NLite.Messaging.SubscribeMode.Sync">
            <summary>
            同步订阅
            </summary>
        </member>
        <member name="F:NLite.Messaging.SubscribeMode.Async">
            <summary>
            异步订阅
            </summary>
        </member>
        <member name="F:NLite.Messaging.SubscribeMode.Parall">
            <summary>
            并行订阅
            </summary>
        </member>
        <member name="T:NLite.Messaging.ISubscribeInfo">
            <summary>
            订阅信息
            </summary>
        </member>
        <member name="P:NLite.Messaging.ISubscribeInfo.Topic">
            <summary>
            主题
            </summary>
        </member>
        <member name="P:NLite.Messaging.ISubscribeInfo.Mode">
            <summary>
            订阅模式
            </summary>
        </member>
        <member name="P:NLite.Messaging.ISubscribeInfo.MessageType">
            <summary>
            消息数据类型
            </summary>
        </member>
        <member name="P:NLite.Messaging.ISubscribeInfo.Handler">
            <summary>
            订阅处理器
            </summary>
        </member>
        <member name="T:NLite.Messaging.SubscribeInfo">
            <summary>
             订阅信息
            </summary>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo.#ctor(System.Type,NLite.Messaging.IObserverHandler{NLite.Messaging.IMessage})">
            <summary>
            
            </summary>
            <param name="messageType"></param>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo.#ctor(NLite.Messaging.IObserverHandler{NLite.Messaging.IMessage})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo.#ctor(System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo.#ctor(System.Action)">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:NLite.Messaging.SubscribeInfo.Topic">
            <summary>
            主题
            </summary>
        </member>
        <member name="P:NLite.Messaging.SubscribeInfo.Mode">
            <summary>
            订阅模式
            </summary>
        </member>
        <member name="P:NLite.Messaging.SubscribeInfo.MessageType">
            <summary>
            消息数据类型
            </summary>
        </member>
        <member name="P:NLite.Messaging.SubscribeInfo.Handler">
            <summary>
            订阅处理器
            </summary>
        </member>
        <member name="T:NLite.Messaging.SubscribeInfo`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`1.#ctor(System.Func{`0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`1.#ctor(System.Func{System.Object,`0,System.Object})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`1.#ctor(System.Func{`0,System.Object})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`1.#ctor(System.Action{System.Object,`0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`1.#ctor(System.Action{`0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:NLite.Messaging.SubscribeInfo`2">
            <summary>
            订阅信息
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`2.#ctor(System.Func{System.Object,`0,`1})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:NLite.Messaging.SubscribeInfo`2.#ctor(System.Func{`0,`1})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:NLite.Messaging.IMessageBus">
            <summary>
            消息总线接口
            </summary>
        </member>
        <member name="T:NLite.Messaging.IPublisher">
            <summary>
            发布者接口
            </summary>
            <remarks>采用设计模式中的观察者模式(发布者订阅者）模式，该接口担当了抽象发布者角色</remarks>
        </member>
        <member name="M:NLite.Messaging.IPublisher.Publish(NLite.Messaging.IMessageRequest)">
            <summary>
            发布消息
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.IMessageBus.Subscribe(NLite.Messaging.ISubscribeInfo)">
            <summary>
            订阅主题消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.IMessageBus.Unsubscribe(System.String,System.Type,NLite.Messaging.IObserverHandler{NLite.Messaging.IMessage})">
            <summary>
            注销订阅的主题消息
            </summary>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.IMessageBus.RegisterListner(NLite.Messaging.IMessageListener[])">
            <summary>
            注册消息监听器
            </summary>
            <param name="listeners">监听器集合</param>
        </member>
        <member name="M:NLite.Messaging.IMessageBus.UnRegisterListner(NLite.Messaging.IMessageListener[])">
            <summary>
            注销消息监听器
            </summary>
            <param name="listeners">监听器集合</param>
        </member>
        <member name="M:NLite.Messaging.IMessageBus.Remove(System.String,System.Type)">
            <summary>
            移除主题消息
            </summary>
            <param name="topic">消息主题</param>
            <param name="binderType">类型</param>
        </member>
        <member name="M:NLite.Messaging.IMessageBus.RemoveAll">
            <summary>
            移除所有主题消息
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessageListener">
            <summary>
            消息监听器接口
            </summary>
        </member>
        <member name="M:NLite.Messaging.IMessageListener.OnSending(NLite.Messaging.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.IMessageListener.OnSent(NLite.Messaging.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.IMessageListener.OnReceivingException(NLite.Messaging.MessageExceptionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.IMessageListener.OnReceiving(NLite.Messaging.MessageReceivingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.IMessageListener.OnReceived(NLite.Messaging.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:NLite.Messaging.IMessageListenerManager">
            <summary>
            消息监听管理器接口
            </summary>
        </member>
        <member name="T:NLite.Messaging.IDelegateInvoker">
            <summary>
             委派调用器接口
            </summary>
        </member>
        <member name="M:NLite.Messaging.IDelegateInvoker.Invoke``1(NLite.Messaging.IObserverHandler{``0},System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="handler"></param>
            <param name="sender"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Messaging.Internal.ISubject">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.Internal.ISubjectBuilder">
            <summary>
            主题对象构造器
            </summary>
            <remarks>
            采用设计模式中的Builder模式
            </remarks>
        </member>
        <member name="M:NLite.Messaging.Internal.ISubjectBuilder.Build(System.String)">
            <summary>
            根据消息主题名称和消息类型构造主题对象并返回
            </summary>
            <param name="name">主题名称</param>
            <returns>返回创建后的主题对象</returns>
        </member>
        <member name="T:NLite.Messaging.Internal.ISubscriber">
            <summary>
            订阅者接口
            </summary>
            <remarks>采用设计模式中的观察者模式(发布者订阅者）模式，该接口担当了抽象订阅者角色</remarks>
        </member>
        <member name="M:NLite.Messaging.Internal.ISubscriber.Subscribe(NLite.Messaging.SubscribeMode,NLite.Messaging.IObserverHandler{NLite.Messaging.IMessage})">
            <summary>
            订阅消息
            </summary>
            <param name="handler">消息处理器</param>
            <param name="mode"></param>
            <returns>返回一个可注销订阅者的对象</returns>
        </member>
        <member name="M:NLite.Messaging.Internal.ISubscriber.Unsubscribe(NLite.Messaging.IObserverHandler{NLite.Messaging.IMessage})">
            <summary>
            
            </summary>
            <param name="handler"></param>
        </member>
        <member name="P:NLite.Messaging.Internal.ISubscriber.Name">
            <summary>
            主题名称
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.ISubscriber.IsAsync">
            <summary>
            是否异步订阅
            </summary>
        </member>
        <member name="T:NLite.Messaging.IObserverHandler`1">
            <summary>
            
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:NLite.Messaging.IObserverHandler`1.Invoke(System.Object,`0)">
            <summary>
            
            </summary>
            <param name="sender">sender</param>
            <param name="message"></param>
        </member>
        <member name="P:NLite.Messaging.IObserverHandler`1.Target">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.IObserverHandler`1.Method">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.Subscriber.IsAsync">
            <summary>
            是否异步订阅
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessage">
            <summary>
            消息接口
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessage.Name">
            <summary>
            消息名称/消息主题（用以标志一个消息）
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessage.Data">
            <summary>
            消息数据
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessage`1">
            <summary>
            消息接口
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:NLite.Messaging.IMessage`1.Data">
            <summary>
             消息数据
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessageRequest">
            <summary>
            消息请求对象接口
            </summary>
        </member>
        <member name="M:NLite.Messaging.IMessageRequest.ToMessage">
            <summary>
            转换为消息对象
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageRequest.IsAsync">
            <summary>
            得到或设置是否同步发布消息
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageRequest.Data">
            <summary>
            得到或设置消息数据
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageRequest.Topic">
            <summary>
            得到或设置消息主题（用以标志一个消息）
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageRequest.Sender">
            <summary>
            得到或设置消息发送者
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessageRequest`1">
            <summary>
            消息请求对象接口
            </summary>
            <typeparam name="TData">泛型消息数据</typeparam>
        </member>
        <member name="P:NLite.Messaging.IMessageRequest`1.Data">
            <summary>
             得到或设置消息数据
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageRequest">
            <summary>
            消息请求对象
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageRequest.ToMessage">
            <summary>
            转换为消息对象
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageRequest.IsAsync">
            <summary>
            得到或设置是否同步发布消息
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageRequest.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageRequest.Sender">
            <summary>
            得到或设置消息发送者
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageRequest.Topic">
            <summary>
            得到或设置消息主题（用以标志一个消息）
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageRequest.Data">
            <summary>
            得到或设置消息数据
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageRequest`1">
            <summary>
            消息请求对象
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:NLite.Messaging.MessageRequest`1.ToMessage">
            <summary>
            转换为消息对象
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Messaging.MessageRequest`1.Data">
            <summary>
            得到或设置消息数据
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessageResponse">
            <summary>
            消息响应结果接口
            </summary>
        </member>
        <member name="M:NLite.Messaging.IMessageResponse.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.IMessageResponse.Wait(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Messaging.IMessageResponse.Results">
            <summary>
            得到消息执行的结果列表
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageResponse.IsCompleted">
            <summary>
            得到一个布尔值用来指示是否处理完毕
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageResponse.Canceled">
            <summary>
            得到或设置取消消息调用
            </summary>
        </member>
        <member name="T:NLite.Messaging.IMessageContext">
            <summary>
            消息上下文接口
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageContext.Request">
            <summary>
            消息请求对象
            </summary>
        </member>
        <member name="P:NLite.Messaging.IMessageContext.Response">
            <summary>
            消息响应对象
            </summary>
        </member>
        <member name="F:NLite.Messaging.Internal.MessageResult.Request">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.Internal.MessageResult.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.Internal.MessageResult.Wait(System.Int32)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.Internal.MessageResult.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:NLite.Messaging.Internal.MessageResult.IsCompleted">
            <summary>
            得到一个布尔值用来指示是否处理完毕
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.MessageResult.Results">
            <summary>
            得到消息执行的结果列表
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.MessageResult.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.Internal.Message">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.Internal.Message.#ctor(System.String,System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="data"></param>
            <param name="timestamp"></param>
        </member>
        <member name="M:NLite.Messaging.Internal.Message.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Messaging.Internal.Message.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.Message.Timestamp">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.Internal.Message.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.Internal.Message`1">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:NLite.Messaging.Internal.Message`1.#ctor(System.String,`0,System.DateTime)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="data"></param>
            <param name="timestamp"></param>
        </member>
        <member name="P:NLite.Messaging.Internal.Message`1.Data">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.Internal.MessageFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.Internal.MessageFactory.Make``1(System.String,``0,System.DateTime)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.Internal.MessageFactory.Make(System.String,System.Object,System.DateTime)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Messaging.SimpleBus">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.Publish(NLite.Messaging.IMessageRequest)">
            <summary>
            
            </summary>
            <param name="req"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.RegisterListner(NLite.Messaging.IMessageListener[])">
            <summary>
            
            </summary>
            <param name="hks"></param>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.UnRegisterListner(NLite.Messaging.IMessageListener[])">
            <summary>
            
            </summary>
            <param name="hks"></param>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.Unsubscribe(System.String,System.Type,NLite.Messaging.IObserverHandler{NLite.Messaging.IMessage})">
            <summary>
            
            </summary>
            <param name="topic">消息主题</param>
            <param name="messageType"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.Subscribe(NLite.Messaging.ISubscribeInfo)">
            <summary>
            
            </summary>
            <param name="topic">消息主题</param>
            <param name="messageType"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.Remove(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="topic">消息主题</param>
            <param name="binderType">类型</param>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.SimpleBus.RemoveAll">
            <summary>
            移除所有主题消息
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageBusExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,System.String,System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``2(NLite.Messaging.IMessageBus,System.String,System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,NLite.Messaging.SubscribeMode,System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``2(NLite.Messaging.IMessageBus,System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,System.String,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``2(NLite.Messaging.IMessageBus,System.String,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``2(NLite.Messaging.IMessageBus,NLite.Messaging.SubscribeMode,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``2(NLite.Messaging.IMessageBus,System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,System.Func{``0})">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Func{``0})">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.String,System.Func{``0})">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,System.Func{System.Object,``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Func{System.Object,``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.String,System.Func{System.Object,``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.Func{System.Object,``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,NLite.Messaging.SubscribeMode,System.Func{System.Object,``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.Func{System.Object,``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.String,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,NLite.Messaging.SubscribeMode,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.Func{``0,System.Object})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe(NLite.Messaging.IMessageBus,System.String,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe(NLite.Messaging.IMessageBus,System.String,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.String,System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,NLite.Messaging.SubscribeMode,System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.String,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe``1(NLite.Messaging.IMessageBus,NLite.Messaging.SubscribeMode,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe``1(NLite.Messaging.IMessageBus,System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe(NLite.Messaging.IMessageBus,System.String,System.Action)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Subscribe(NLite.Messaging.IMessageBus,System.String,NLite.Messaging.SubscribeMode,System.Action)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="mode"></param>
            <param name="handler">处理器</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Unsubscribe(NLite.Messaging.IMessageBus,System.String,System.Action)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="handler">处理器</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Remove``1(NLite.Messaging.IMessageBus,System.String)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Remove``1(NLite.Messaging.IMessageBus)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Remove(NLite.Messaging.IMessageBus,System.String)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Publish``1(NLite.Messaging.IMessageBus,System.String,System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="sender">sender</param>
            <param name="msg">消息</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Publish``1(NLite.Messaging.IMessageBus,System.String,``0)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
            <param name="msg">消息</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Publish``1(NLite.Messaging.IMessageBus,System.Object,``0)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="sender">sender</param>
            <param name="msg">消息</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Publish``1(NLite.Messaging.IMessageBus,``0)">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="bus"></param>
            <param name="msg">消息</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Publish(NLite.Messaging.IMessageBus,System.String)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="topic">消息主题</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Publish(NLite.Messaging.IMessageBus,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="bus"></param>
            <param name="sender">sender</param>
            <param name="topic">消息主题</param>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Attach(NLite.Messaging.IMessageBus,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="router"></param>
            <param name="cfg"></param>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Attach``1(NLite.Messaging.IMessageBus,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            
            </summary>
            <typeparam name="TOwner"></typeparam>
            <param name="router"></param>
            <param name="cfg"></param>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Attach``1(NLite.Messaging.IMessageBus,System.String,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            
            </summary>
            <typeparam name="TOwner"></typeparam>
            <param name="router"></param>
            <param name="topic"></param>
            <param name="cfg"></param>
            <param name="evt"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.MessageBusExtensions.Attach(NLite.Messaging.IMessageBus,System.String,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="router"></param>
            <param name="topic">消息主题</param>
            <param name="cfg"></param>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Messaging.MessageEventArgs">
            <summary>
            消息事件参数
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageEventArgs.#ctor(NLite.Messaging.IMessageContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Messaging.MessageEventArgs.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Messaging.MessageEventArgs.Sender">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageEventArgs.Context">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageExceptionEventArgs">
            <summary>
            消息异常事件参数
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageExceptionEventArgs.#ctor(NLite.Messaging.IMessageContext,System.Exception)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="ex"></param>
        </member>
        <member name="P:NLite.Messaging.MessageExceptionEventArgs.Error">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageExceptionEventArgs.Canceled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageListner">
            <summary>
            缺省消息监听器
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageListner.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageListner.#ctor(NLite.Messaging.MessageListnerType)">
            <summary>
            
            </summary>
            <param name="hookType"></param>
        </member>
        <member name="M:NLite.Messaging.MessageListner.OnSending(NLite.Messaging.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.MessageListner.OnSent(NLite.Messaging.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.MessageListner.OnReceivingException(NLite.Messaging.MessageExceptionEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.MessageListner.OnReceiving(NLite.Messaging.MessageReceivingEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:NLite.Messaging.MessageListner.OnReceived(NLite.Messaging.MessageEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:NLite.Messaging.MessageListner.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageListnerType">
            <summary>
            消息监听器监听类型
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.ReceivingException">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.Sending">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.Sent">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.Send">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.Receiving">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.Received">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.Receive">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Messaging.MessageListnerType.All">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.MessageReceivingEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.MessageReceivingEventArgs.#ctor(NLite.Messaging.IMessageContext,System.Object)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="receiver"></param>
        </member>
        <member name="P:NLite.Messaging.MessageReceivingEventArgs.Receiver">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Messaging.MessageReceivingEventArgs.Ignored">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Messaging.ObserverHandler">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Messaging.ObserverHandler.Create2``1(System.Action{System.Object,``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.ObserverHandler.CreateC``2(System.Func{System.Object,``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.ObserverHandler.Create1``1(System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.ObserverHandler.CreateB``2(System.Func{``0,``1})">
            <summary>
            
            </summary>
            <typeparam name="TData"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.ObserverHandler.Create(System.Action)">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Messaging.ObserverHandler.CreateA``1(System.Func{``0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Activation.AbstractActivator">
            <summary>
            抽象组件工厂
            </summary>
        </member>
        <member name="T:NLite.Mini.Activation.IActivator">
            <summary>
            组件工厂
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.IActivator.Create(NLite.Mini.Context.IComponentContext)">
            <summary>
            创建组件
            </summary>
            <param name="ctx">创建上下文</param>
            <returns>返回所创建的组件</returns>
        </member>
        <member name="M:NLite.Mini.Activation.AbstractActivator.Create(NLite.Mini.Context.IComponentContext)">
            <summary>
            创建组件
            </summary>
            <param name="context">创建上下文</param>
            <returns>返回所创建的组件</returns>
        </member>
        <member name="M:NLite.Mini.Activation.AbstractActivator.InternalCreate(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Activation.ActivatorException">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="T:NLite.Mini.Activation.ActivatorFactory">
            <summary>
            组件工厂的工厂
            </summary>
        </member>
        <member name="T:NLite.Mini.Activation.IActivatorFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.IActivatorFactory.Register(System.String,System.Func{NLite.Mini.Activation.IActivator})">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <param name="creator"></param>
        </member>
        <member name="M:NLite.Mini.Activation.IActivatorFactory.Create(System.String)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorFactory.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorFactory.Register(System.String,System.Func{NLite.Mini.Activation.IActivator})">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <param name="creator"></param>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorFactory.Unregister(System.String)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
        </member>
        <member name="M:NLite.Mini.Activation.ActivatorFactory.Create(System.String)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Activation.DefaultActivator">
            <summary>
            缺省组件工厂
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.DefaultActivator.InternalCreate(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Activation.DelegateActivator">
            <summary>
            委派组件工厂，通过委托函数（组件在注册时自己提供了基于委托函数的工厂）创建并返回
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.DelegateActivator.InternalCreate(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mini.Activation.DelegateActivator.Creator">
            <summary>
            委托函数
            </summary>
        </member>
        <member name="T:NLite.Mini.Activation.InstanceActivator">
            <summary>
            实例工厂
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.InstanceActivator.InternalCreate(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Activation.ProxyActivator">
            <summary>
            动态代理组件工厂
            </summary>
        </member>
        <member name="M:NLite.Mini.Activation.ProxyActivator.#ctor(NLite.Mini.Activation.IActivator)">
            <summary>
            
            </summary>
            <param name="real"></param>
        </member>
        <member name="M:NLite.Mini.Activation.ProxyActivator.Create(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.ComponentAttribute">
            <summary>
            被标记为一个“组件”,该组件实现了一个或多个“契约”，如果没有实现任何“契约”，那么该组件也作为“契约”进行注册
            </summary>
        </member>
        <member name="P:NLite.ComponentAttribute.Id">
            <summary>
            得到或设置组件的Id
            </summary>
        </member>
        <member name="P:NLite.ComponentAttribute.Lifestyle">
            <summary>
            得到或设置组件的生命周期
            </summary>
        </member>
        <member name="P:NLite.ComponentAttribute.Contract">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ContractAttribute">
            <summary>
            指定某个接口，抽象类，或类标记为契约
            </summary>
        </member>
        <member name="T:NLite.InjectAttribute">
            <summary>
            标记某个字段，属性，参数可以被DI容器自动注入进来，
            也可以标记某个方法或构造函数让DI容器通过该方法或构造函数进行
            </summary>
        </member>
        <member name="P:NLite.InjectAttribute.Id">
            <summary>
            得到或设置组件依赖Id
            </summary>
        </member>
        <member name="P:NLite.InjectAttribute.Reinjection">
            <summary>
            是否支持重新注入
            </summary>
        </member>
        <member name="T:NLite.InjectManyAttribute">
            <summary>
            标记某个字段,属性或参数的值来源是通过注入多个实现了该契约的组件过来的
            </summary>
        </member>
        <member name="F:NLite.InjectManyAttribute.Reinjection">
            <summary>
            是否支持重新注入,缺省为true
            </summary>
        </member>
        <member name="T:NLite.ResourceAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ResourceAttribute.BaseResourceName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ResourceAttribute.ResourceFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.StringResourceAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ImageResourceAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.IconResourceAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.SettingAttribute">
            <summary>
            标记某个字段，属性被DI容器自动从AppSetting设置或者属性文件中注入进来，
            </summary>
        </member>
        <member name="M:NLite.SettingAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:NLite.SettingAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.IComponentInfo">
            <summary>
            组件元数据信息接口
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.Id">
            <summary>
            得到组件标帜Id
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.Contracts">
            <summary>
            得到组件实现的所有契约
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.Implementation">
            <summary>
            得到组件的具体类型
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.Activator">
            <summary>
            得到或设置组件的工厂类型（该属性常常作为组件的自定义工厂）
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.Lifestyle">
            <summary>
            得到或设置组件的生命周期
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.ExtendedProperties">
            <summary>
            得到组件的扩展属性
            </summary>
        </member>
        <member name="P:NLite.IComponentInfo.Factory">
            <summary>
            得到组件的工厂函数
            </summary>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.String,System.Type,System.Func{System.Object},NLite.LifestyleFlags)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="factory"></param>
            <param name="lifestyleType"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.String,System.Type,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="factory"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.Type,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <param name="factory"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.String,System.Type,System.Type,NLite.LifestyleFlags)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="implementation"></param>
            <param name="lifestyleType"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.String,System.Type,System.Type,System.String,NLite.LifestyleFlags)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="implementation"></param>
            <param name="activator"></param>
            <param name="lifestyleType"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.String,System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="implementation"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <param name="implementation"></param>
        </member>
        <member name="M:NLite.ComponentInfo.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="implementation"></param>
        </member>
        <member name="M:NLite.ComponentInfo.op_Equality(NLite.ComponentInfo,NLite.ComponentInfo)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentInfo.op_Inequality(NLite.ComponentInfo,NLite.ComponentInfo)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentInfo.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentInfo.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ComponentInfo.Equals(NLite.IComponentInfo)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.ComponentInfo.Id">
            <summary>
            得到组件Id
            </summary>
        </member>
        <member name="P:NLite.ComponentInfo.Contracts">
            <summary>
            得到组件实现的所有契约
            </summary>
        </member>
        <member name="P:NLite.ComponentInfo.Implementation">
            <summary>
            得到组件的具体类型
            </summary>
        </member>
        <member name="P:NLite.ComponentInfo.Lifestyle">
            <summary>
            得到或设置组件的生命周期
            </summary>
        </member>
        <member name="P:NLite.ComponentInfo.Activator">
            <summary>
            得到或设置组件的工厂类型（该属性常常作为组件的自定义工厂）
            </summary>
        </member>
        <member name="P:NLite.ComponentInfo.Factory">
            <summary>
            得到组件的工厂函数
            </summary>
        </member>
        <member name="P:NLite.ComponentInfo.ExtendedProperties">
            <summary>
            得到组件的扩展属性
            </summary>
        </member>
        <member name="T:NLite.Mini.Listener.AopListener">
            <summary>
            Aop 监听器
            </summary>
        </member>
        <member name="T:NLite.Mini.Listener.ComponentListenerAdapter">
            <summary>
            组件监听适配器
            </summary>
        </member>
        <member name="T:NLite.IComponentListener">
            <summary>
            组件监听器接口，在组件元数据注册，组件创建前后，组件初始化前后以及组件释放前后进行监听
            </summary>
        </member>
        <member name="M:NLite.IComponentListener.Init(NLite.IKernel)">
            <summary>
            初始化监听器
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnMetadataRegistering(NLite.IComponentInfo)">
            <summary>
            在组件元数据注册前进行监听，例如Aop监听器
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnMetadataRegistered(NLite.IComponentInfo)">
            <summary>
            在组件元数据注册后进行监听，例如Aop监听器
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnMetadataUnregistered(NLite.IComponentInfo)">
            <summary>
            在组件元数据注销后进行监听，例如Aop监听器
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnPreCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件创建前进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnPostCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件创建后进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件创建后对组件初始化进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnPostInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件初始化后进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnFetch(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件获取后进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            在组件释放前进行监听
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="M:NLite.IComponentListener.OnPostDestroy(NLite.IComponentInfo)">
            <summary>
            在组件释放后进行监听
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="P:NLite.IComponentListener.Kernel">
            <summary>
            得到内核容器对象
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnMetadataRegistering(NLite.IComponentInfo)">
            <summary>
            在组件元数据注册前进行监听，例如Aop监听器
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnMetadataRegistered(NLite.IComponentInfo)">
            <summary>
            在组件元数据注册后进行监听，例如Aop监听器
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnMetadataUnregistered(NLite.IComponentInfo)">
            <summary>
            在组件元数据注销后进行监听，例如Aop监听器
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnPreCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件创建前进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnPostCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件创建后进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件创建后对组件初始化进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnPostInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            在组件初始化后进行监听
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnFetch(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            在组件释放前进行监听
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenerAdapter.OnPostDestroy(NLite.IComponentInfo)">
            <summary>
            在组件释放后进行监听
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="P:NLite.Mini.Listener.ComponentListenerAdapter.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.AopListener.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.AopListener.OnMetadataRegistered(NLite.IComponentInfo)">
            <summary>
            在组件元数据注册后进行监听，如果符合代理条件的就在元数据的扩展属性里面添加一个"proxy"标记位
            </summary>
            <param name="bindingInfo"></param>
        </member>
        <member name="T:NLite.Mini.Listener.AppSettingInjectionListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.AppSettingInjectionListener.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.AppSettingInjectionListener.OnPostCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.AppSettingInjectionListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="T:NLite.Mini.Listener.ComponentListenManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.IComponentListenerManager">
            <summary>
            组件监听管理器接口
            </summary>
        </member>
        <member name="M:NLite.IComponentListenerManager.Init(NLite.IKernel)">
            <summary>
            初始化组件监听管理器
            </summary>
            <param name="registry"></param>
        </member>
        <member name="P:NLite.IComponentListenerManager.Enabled">
            <summary>
            是否启用监听器
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenManager.OnAfterRegister(NLite.IComponentListener)">
            <summary>
            
            </summary>
            <param name="listner"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenManager.Init(NLite.IKernel)">
            <summary>
            
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:NLite.Mini.Listener.ComponentListenManager.Init">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Listener.ComponentListenManager.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Listener.ComponentListenManager.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Listener.DisposalListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.DisposalListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="T:NLite.Mini.Listener.InitializationListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.InitializationListener.OnInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.Mini.Listener.InjectionListener">
            <summary>
            注入监听器
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.InjectionListener.OnMetadataRegistered(NLite.IComponentInfo)">
            <summary>
            
            </summary>
            <param name="info"></param>
        </member>
        <member name="M:NLite.Mini.Listener.InjectionListener.OnPreCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.InjectionListener.OnPostCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.InjectionListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="instance"></param>
        </member>
        <member name="T:NLite.Mini.Listener.LifecycleAdapterListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.LifecycleAdapterListener.Init">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.LifecycleAdapterListener.OnPostCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.LifecycleAdapterListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="T:NLite.Mini.Listener.MemberExportListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.MemberExportListener.OnPostInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.MemberExportListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="T:NLite.Mini.Listener.StartableListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.StartableListener.OnPostInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.StartableListener.OnPreDestroy(NLite.IComponentInfo,System.Object)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="instance"></param>
        </member>
        <member name="T:NLite.Mini.Listener.SubscribeListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.SubscribeListener.OnPostCreation(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.Mini.Listener.SupportInitializeListener">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Listener.SupportInitializeListener.OnInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Listener.SupportInitializeListener.OnPostInitialization(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:NLite.Mini.Context.ComponentContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Context.IComponentContext">
            <summary>
            Mini 容器上下文接口
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.IComponentContext.Kernel">
            <summary>
            得到Mini容器
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.IComponentContext.Component">
            <summary>
            得到组件元数据
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.IComponentContext.GenericParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.IComponentContext.NamedArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.IComponentContext.Args">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.IComponentContext.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Context.ComponentContext.#ctor(NLite.IKernel,System.Type[])">
            <summary>
            
            </summary>
            <param name="registry"></param>
            <param name="gernericParameters"></param>
        </member>
        <member name="M:NLite.Mini.Context.ComponentContext.Init(NLite.IComponentInfo)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Context.ComponentContext.#ctor(NLite.IKernel,NLite.IComponentInfo,System.Collections.Generic.IDictionary{System.String,System.Object},System.Type[])">
            <summary>
            
            </summary>
            <param name="registry"></param>
            <param name="bindingInfo"></param>
            <param name="args"></param>
            <param name="genericParameters"></param>
        </member>
        <member name="M:NLite.Mini.Context.ComponentContext.#ctor(NLite.IKernel,NLite.IComponentInfo,System.Object[],System.Type[])">
            <summary>
            
            </summary>
            <param name="registry"></param>
            <param name="bindingInfo"></param>
            <param name="args"></param>
            <param name="genericParameters"></param>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.LifestyleManager">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.Component">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.NamedArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.Args">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.GenericParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Context.ComponentContext.Instance">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ContractService">
            <summary>
            契约服务
            </summary>
        </member>
        <member name="M:NLite.ContractService.GetContracts(System.Type)">
            <summary>
            返回组件实现的所有契约类型
            </summary>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ContractService.GetContracts(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            返回组件实现的所有契约类型
            </summary>
            <param name="componentType"></param>
            <param name="contracts"></param>
        </member>
        <member name="T:NLite.FluentExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.FluentExtensions.Singleton(NLite.Mini.Fluent.IComponentExpression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.FluentExtensions.Transient(NLite.Mini.Fluent.IComponentExpression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.FluentExtensions.Thread(NLite.Mini.Fluent.IComponentExpression)">
            <summary>
            
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Fluent.IComponentExpression">
            <summary>
            组件表达是接口
            </summary>
        </member>
        <member name="T:NLite.Mini.Fluent.IRegistryExpression">
            <summary>
            组件注册表达式接口
            </summary>
        </member>
        <member name="P:NLite.Mini.Fluent.IRegistryExpression.Registry">
            <summary>
            得到注册表
            </summary>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Named(System.String)">
            <summary>
            设置Id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Lifestyle(NLite.LifestyleFlags)">
            <summary>
            设置组件生命周期类型
            </summary>
            <param  name="lifestyle"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Activator(System.String)">
            <summary>
            设置组件工厂类型
            </summary>
            <param name="activator"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Add(System.String,System.Object)">
            <summary>
            添加组件的一个元数据项
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Bind(System.Type)">
            <summary>
            设置契约类型
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Bind``1">
            <summary>
            设置契约类型
            </summary>
            <typeparam name="TContract"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Bind(System.Type,System.String)">
            <summary>
            设置契约类型和Id
            </summary>
            <param name="contract"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Bind``1(System.String)">
            <summary>
            设置契约类型和Id
            </summary>
            <typeparam name="TContract"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.To(System.Type)">
            <summary>
            设置组件类型
            </summary>
            <param name="componentType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.To``1">
            <summary>
            设置组件类型
            </summary>
            <typeparam name="TComponent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Fluent.IComponentExpression.Factory(System.Func{System.Object})">
            <summary>
            设置组件的工厂方法
            </summary>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.IKernel">
            <summary>
            容器接口
            </summary>
        </member>
        <member name="T:NLite.ILazyServiceLocator">
            <summary>
            懒惰服务定位器
            </summary>
        </member>
        <member name="T:NLite.IServiceLocator">
            <summary>
            服务定位器接口
            </summary>
        </member>
        <member name="M:NLite.IServiceLocator.Get(System.String)">
            <summary>
            得到服务
            </summary>
            <param name="id">服务Id</param>
            <returns>返回服务实例</returns>
        </member>
        <member name="M:NLite.IServiceLocator.Get(System.Type)">
            <summary>
            得到服务
            </summary>
            <param name="serviceType">服务类型</param>
            <returns>返回服务实例</returns>
        </member>
        <member name="M:NLite.IServiceLocator.Get(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            得到服务
            </summary>
            <param name="id">服务Id</param>
            <returns>返回服务实例</returns>
        </member>
        <member name="M:NLite.IServiceLocator.Get(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            得到服务
            </summary>
            <param name="service">服务类型</param>
            <returns>返回服务实例</returns>
        </member>
        <member name="M:NLite.IServiceLocator.Get(System.String,System.Object[])">
            <summary>
            得到服务
            </summary>
            <param name="id"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceLocator.Get(System.Type,System.Object[])">
            <summary>
            得到服务
            </summary>
            <param name="serviceType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceLocator.GetAll(System.Type)">
            <summary>
            得到所有服务
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceLocator.GetAll``1">
            <summary>
            得到所有服务
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ILazyServiceLocator.LazyGetAll``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ILazyServiceLocator.LazyMetadataGetAll``2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ILazyServiceLocator.LazyGet``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ILazyServiceLocator.LazyMetadataGet``2(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.IServiceRegistry">
            <summary>
            服务注册表接口
            </summary>
        </member>
        <member name="M:NLite.IServiceRegistry.Register(NLite.IComponentInfo)">
            <summary>
            通过组件元数据注册组件到容器中
            </summary>
            <param name="bindingInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceRegistry.Compose(System.Object)">
            <summary>
            将组件实例所依赖的其它组件都通过容器自动注入进来
            </summary>
            <param name="componentInstance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceRegistry.RegisterInstance(System.String,System.Object)">
            <summary>
            注册实例
            </summary>
            <param name="id">实例Id</param>
            <param name="instance">实例</param>
        </member>
        <member name="M:NLite.IServiceRegistry.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            注册实例
            </summary>
            <param name="id">实例Id</param>
            <param name="contract">服务</param>
            <param name="instance">实例</param>
        </member>
        <member name="M:NLite.IServiceRegistry.HasRegister(System.Type)">
            <summary>
            是否注册了实现给定契约接口的组件
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceRegistry.HasRegister(System.String)">
            <summary>
            是否注册了含有组件Id的组件
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IServiceRegistry.UnRegister(System.String)">
            <summary>
            通过组件Id注销组件
            </summary>
            <param name="id">组件Id</param>
        </member>
        <member name="M:NLite.IServiceRegistry.UnRegister(System.Type)">
             <summary>
            通过契约类型注销相应的组件
             </summary>
        </member>
        <member name="P:NLite.IServiceRegistry.ListenerManager">
            <summary>
            得到监听管理器
            </summary>
        </member>
        <member name="M:NLite.IKernel.GetComponentContextByNamedArgs(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            得到组件上下文
            </summary>
            <param name="contract"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IKernel.GetComponentContextByOptionArgs(System.Type,System.Object[])">
            <summary>
            得到组件上下文
            </summary>
            <param name="contract"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IKernel.GetComponentContextByNamedArgs(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            得到组件上下文
            </summary>
            <param name="id"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IKernel.GetComponentContextByOptionArgs(System.String,System.Object[])">
            <summary>
            得到组件上下文
            </summary>
            <param name="id"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.IKernel.GetComponentContextList(System.Type)">
            <summary>
            得到组件上下文列表
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.IKernel.Parent">
            <summary>
            得到或设置父容器
            </summary>
        </member>
        <member name="T:NLite.ILifecycleListner">
            <summary>
            组件生命周期监听器接口
            </summary>
        </member>
        <member name="M:NLite.ILifecycleListner.OnCreated(System.Object)">
            <summary>
            监听组件被创建
            </summary>
            <param name="o">组件</param>
        </member>
        <member name="M:NLite.ILifecycleListner.OnDestroying(System.Object)">
            <summary>
            监听组件被释放
            </summary>
            <param name="o">组件</param>
        </member>
        <member name="T:NLite.ILifecycleListnerManager">
            <summary>
            件生命周期监听管理器接口
            </summary>
        </member>
        <member name="T:NLite.Mini.InjectManyException">
            <summary>
            批量注入异常
            </summary>
        </member>
        <member name="M:NLite.Mini.InjectManyException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.InjectManyException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLite.Mini.InjectManyException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:NLite.Mini.InjectManyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="T:NLite.IServiceReinjectedNotification">
            <summary>
            服务重组通知接口
            </summary>
        </member>
        <member name="M:NLite.IServiceReinjectedNotification.OnReinjected">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ServiceLocatorExtensions">
            <summary>
            服务定位器扩展类
            </summary>
        </member>
        <member name="M:NLite.ServiceLocatorExtensions.Get``1(NLite.IServiceLocator,System.String)">
            <summary>
            通过组件Id得到指定的组件
            </summary>
            <typeparam name="TComponent">组件类型</typeparam>
            <param name="id">组件Id</param>
            <returns>返回组件实例</returns>
        </member>
        <member name="T:NLite.ServiceProviderExtensions">
            <summary>
            服务提供者扩展类
            </summary>
        </member>
        <member name="M:NLite.ServiceProviderExtensions.Get``1(NLite.IServiceLocator)">
            <summary>
            通过契约类型得到组件实例
            </summary>
            <typeparam name="TContract">契约类型</typeparam>
            <returns>返回组件实例</returns>
        </member>
        <member name="M:NLite.ServiceProviderExtensions.Get``2(NLite.IServiceLocator)">
            <summary>
            通过契约类型得到指定的组件实例
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <param name="locator"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.ServiceRegistry">
            <summary>
            服务注册表门面
            </summary>
        </member>
        <member name="M:NLite.ServiceRegistry.HasRegister``1">
            <summary>
            是否注册了实现给定契约接口的组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.HasRegister(System.Type)">
            <summary>
            是否注册了实现给定契约接口的组件
            </summary>
            <param name="service"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.HasRegister(System.String)">
            <summary>
            是否注册了含有组件Id的组件
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.Register``1">
            <summary>
            通过组件类型注册组件
            </summary>
            <typeparam name="TComponent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.Register``1(System.String)">
            <summary>
            通过组件类型和和组件Id来注册组件
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.Register(System.Action{NLite.Mini.Fluent.IComponentExpression})">
            <summary>
            通过流畅Api接口来注册组件
            </summary>
            <param name="handlers"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.RegisteryFromAssemblyOf``1">
            <summary>
            注册指定类型所在Assembly下的所有标记为"ComponentAttribue"的组件
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistry.Compose(System.Object)">
            <summary>
            将组件实例所依赖的其它组件都通过容器自动注入进来
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.ServiceRegistry.Current">
            <summary>
            返回当前活动的服务注册表
            </summary>
        </member>
        <member name="T:NLite.Mini.Kernel">
            <summary>
            Mini容器微内核
            </summary>
        </member>
        <member name="M:NLite.Mini.Kernel.#ctor">
            <summary>
            构造缺省内核容器
            </summary>
        </member>
        <member name="M:NLite.Mini.Kernel.#ctor(NLite.IComponentListenerManager,NLite.Mini.Lifestyle.ILifestyleManagerFactory,NLite.Mini.Activation.IActivatorFactory,NLite.Reflection.IClassLoader)">
            <summary>
            构造内核容器
            </summary>
            <param name="listenManager">组件监听管理器</param>
            <param name="lifestyleManagerRegistry">生命周期管理器注册表</param>
            <param name="activatorFactory">组件工厂的工厂</param>
            <param name="classLoader">类型加载器</param>
        </member>
        <member name="M:NLite.Mini.Kernel.HasRegister(System.String)">
            <summary>
            是否注册了含有组件Id的组件
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.HasRegister(System.Type)">
            <summary>
            是否注册了实现给定契约接口的组件
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Register(NLite.IComponentInfo)">
            <summary>
            通过组件元数据注册组件到容器中
            </summary>
            <param name="componentInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.RegisterInstance(System.String,System.Type,System.Object)">
            <summary>
            注册实例
            </summary>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.RegisterInstance(System.String,System.Object)">
            <summary>
            注册实例
            </summary>
            <param name="id"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Compose(System.Object)">
            <summary>
            将组件实例所依赖的其它组件都通过容器自动注入进来
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.UnRegister(System.Type)">
            <summary>
            通过契约类型注销相应的组件
            </summary>
            <param name="contract"></param>
        </member>
        <member name="M:NLite.Mini.Kernel.UnRegister(System.String)">
            <summary>
            通过组件Id注销组件
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:NLite.Mini.Kernel.Get(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Get(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.GetComponentContextByNamedArgs(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Get(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Get(System.Type,System.Object[])">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Get(System.String)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Get(System.Type)">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.LazyGet``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.LazyMetadataGet``2(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.GetAll(System.Type)">
            <summary>
            
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.GetAll``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.LazyGetAll``1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.LazyMetadataGetAll``2">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TMetadata"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.GetService(System.Type)">
            <summary>
            
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Kernel.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:NLite.Mini.Kernel.Parent">
            <summary>
            父容器
            </summary>
        </member>
        <member name="P:NLite.Mini.Kernel.ListenerManager">
            <summary>
            组件监听管理器
            </summary>
        </member>
        <member name="T:NLite.LifecycleListnerManager">
            <summary>
            生命周期监听管理器
            </summary>
        </member>
        <member name="T:NLite.ActivatorType">
            <summary>
            对象工厂类型
            </summary>
        </member>
        <member name="F:NLite.ActivatorType.Default">
            <summary>
            缺省工厂类型
            </summary>
        </member>
        <member name="F:NLite.ActivatorType.Instance">
            <summary>
            实例工厂类型
            </summary>
        </member>
        <member name="F:NLite.ActivatorType.Factory">
            <summary>
            工厂的工厂类型
            </summary>
        </member>
        <member name="F:NLite.ActivatorType.Proxy">
            <summary>
            代理工厂类型
            </summary>
        </member>
        <member name="T:NLite.LifestyleType">
            <summary>
            组件生命周期类型
            </summary>
        </member>
        <member name="P:NLite.LifestyleType.Default">
            <summary>
            得到或设置组件的确实生命周期类型
            </summary>
        </member>
        <member name="T:NLite.LifestyleFlags">
            <summary>
            组件生命周期类型枚举
            </summary>
        </member>
        <member name="F:NLite.LifestyleFlags.Singleton">
            <summary>
            单利
            </summary>
        </member>
        <member name="F:NLite.LifestyleFlags.Thread">
            <summary>
            线程内单利
            </summary>
        </member>
        <member name="F:NLite.LifestyleFlags.Transient">
            <summary>
            临时
            </summary>
        </member>
        <member name="F:NLite.LifestyleFlags.GenericSingleton">
            <summary>
            泛型单利
            </summary>
        </member>
        <member name="F:NLite.LifestyleFlags.GenericThread">
            <summary>
            泛型线程内单利
            </summary>
        </member>
        <member name="F:NLite.LifestyleFlags.GenericTransient">
            <summary>
            泛型临时
            </summary>
        </member>
        <member name="T:NLite.Mini.Lifestyle.GenericLifestyleManager`1">
            <summary>
            
            </summary>
            <typeparam name="TLifestyleManager"></typeparam>
        </member>
        <member name="T:NLite.Mini.Lifestyle.ILifestyleManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ILifestyleManager.Init(NLite.Mini.Activation.IActivator,NLite.IKernel,NLite.IComponentInfo,System.Action{NLite.IComponentInfo,System.Object},System.Action{NLite.Mini.Context.IComponentContext})">
            <summary>
            
            </summary>
            <param name="activator"></param>
            <param name="registry"></param>
            <param name="bindingInfo"></param>
            <param name="onDestroy"></param>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ILifestyleManager.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mini.Lifestyle.ILifestyleManager.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.ILifestyleManager.Activator">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.ILifestyleManager.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.ILifestyleManager.OnDestroying">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Mini.Lifestyle.GenericLifestyleManager`1.cache">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.GenericLifestyleManager`1.Init(NLite.Mini.Activation.IActivator,NLite.IKernel,NLite.IComponentInfo,System.Action{NLite.IComponentInfo,System.Object},System.Action{NLite.Mini.Context.IComponentContext})">
            <summary>
            
            </summary>
            <param name="activator"></param>
            <param name="registry"></param>
            <param name="bindingInfo"></param>
            <param name="onDestroyed"></param>
        </member>
        <member name="M:NLite.Mini.Lifestyle.GenericLifestyleManager`1.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Lifestyle.GenericLifestyleManager`1.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.GenericLifestyleManager`1.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.GenericLifestyleManager`1.Activator">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.GenericLifestyleManager`1.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.GenericLifestyleManager`1.OnDestroying">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Lifestyle.GenericSingletonLifestyleManager">
            <summary>
            泛型单例生命周期管理器
            </summary>
        </member>
        <member name="T:NLite.Mini.Lifestyle.GenericThreadLifestyleManager">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Lifestyle.GenericTransientLifestyleManager">
            <summary>
            泛型临时生命周期管理器
            </summary>
        </member>
        <member name="T:NLite.Mini.Lifestyle.ILifestyleManagerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ILifestyleManagerFactory.Create(NLite.LifestyleFlags)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Lifestyle.LifestyleManagerAdapter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.LifestyleManagerAdapter.Init(NLite.Mini.Activation.IActivator,NLite.IKernel,NLite.IComponentInfo,System.Action{NLite.IComponentInfo,System.Object},System.Action{NLite.Mini.Context.IComponentContext})">
            <summary>
            
            </summary>
            <param name="activator"></param>
            <param name="registry"></param>
            <param name="bindingInfo"></param>
            <param name="onDestroying"></param>
        </member>
        <member name="M:NLite.Mini.Lifestyle.LifestyleManagerAdapter.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Lifestyle.LifestyleManagerAdapter.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:NLite.Mini.Lifestyle.LifestyleManagerAdapter.Kernel">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.LifestyleManagerAdapter.Activator">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.LifestyleManagerAdapter.Info">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Mini.Lifestyle.LifestyleManagerAdapter.OnDestroying">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Lifestyle.LifestyleManagerFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.LifestyleManagerFactory.Create(NLite.LifestyleFlags)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Lifestyle.ProxyLifestyleManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ProxyLifestyleManager.#ctor(NLite.Mini.Lifestyle.ILifestyleManager)">
            <summary>
            
            </summary>
            <param name="real"></param>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ProxyLifestyleManager.Init(NLite.Mini.Activation.IActivator,NLite.IKernel,NLite.IComponentInfo,System.Action{NLite.IComponentInfo,System.Object},System.Action{NLite.Mini.Context.IComponentContext})">
            <summary>
            
            </summary>
            <param name="activator"></param>
            <param name="registry"></param>
            <param name="bindingInfo"></param>
            <param name="onDestroying"></param>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ProxyLifestyleManager.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ProxyLifestyleManager.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Lifestyle.SingletontLifestyleManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.SingletontLifestyleManager.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Lifestyle.SingletontLifestyleManager.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:NLite.Mini.Lifestyle.ThreadLifestyleManager">
            <summary>
            线程生命周期管理器
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ThreadLifestyleManager.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Lifestyle.ThreadLifestyleManager2">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ThreadLifestyleManager2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLite.Mini.Lifestyle.ThreadLifestyleManager"/> class.
            </summary>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ThreadLifestyleManager2.Get(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Lifestyle.ThreadLifestyleManager2.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:NLite.Mini.Lifestyle.TransientLifestyleManager">
            <summary>
            临时声明周期管理器
            </summary>
        </member>
        <member name="T:NLite.IMetadata">
            <summary>
            元数据接口
            </summary>
        </member>
        <member name="P:NLite.IMetadata.Name">
            <summary>
            得到元数据名称
            </summary>
        </member>
        <member name="P:NLite.IMetadata.Value">
            <summary>
            得到元数据Value 
            </summary>
        </member>
        <member name="T:NLite.MetadataAttribute">
            <summary>
            元数据注解
            </summary>
        </member>
        <member name="M:NLite.MetadataAttribute.#ctor(System.String,System.Object)">
            <summary>
            构造元数据注解
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:NLite.MetadataAttribute.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.MetadataAttribute.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.MetadataAttributeAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.MetadataAttributeAttribute.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Mini_Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.ContractTypeShouldBeDelegateType">
            <summary>
              Looks up a localized string similar to Contract binderType {0} should be delegate binderType..
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.MethodNotAllowRefOrOutParameters">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.MethodParametersToolMany">
            <summary>
              Looks up a localized string similar to .
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.NoConstructorsAvailable">
            <summary>
              Looks up a localized string similar to No constructors on binderType &apos;{0}&apos; can be found with &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.NoConstructorsBindable">
            <summary>
              Looks up a localized string similar to None of the constructors found with &apos;{0}&apos; on binderType &apos;{1}&apos; can be invoked with the available services and parameters:{2}.
            </summary>
        </member>
        <member name="P:NLite.Mini.Mini_Resources.TypeAbstract">
            <summary>
              Looks up a localized string similar to Type {0} is abstract.\r\n As such, it is not possible to instansiate it as implementation of {1} service.
            </summary>
        </member>
        <member name="T:NLite.Mini.Proxy.IProxyFactory">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Proxy.IProxyFactory.Create(NLite.Mini.Context.IComponentContext,System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="instance"></param>
            <param name="constructorArguments"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Proxy.IProxyFactory.RequiresTargetInstance(NLite.IKernel,NLite.IComponentInfo)">
            <summary>
            
            </summary>
            <param name="registry"></param>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.RepeatRegistrationException">
            <summary>
            重复注册异常类
            </summary>
        </member>
        <member name="M:NLite.RepeatRegistrationException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.RepeatRegistrationException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLite.RepeatRegistrationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="T:NLite.Mini.Resolving.IDependency">
            <summary>
            依赖接口
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.IDependency.IsAssignableFrom(System.Type)">
            <summary>
            判断当前依赖的Type是否是指定类型的基类
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Resolving.IDependency.Refresh(NLite.IComponentInfo,NLite.IKernel)">
            <summary>
            当新组件注册时进行刷新
            </summary>
            <param name="bindingInfo"></param>
            <param name="registry"></param>
        </member>
        <member name="P:NLite.Mini.Resolving.IDependency.IsOptional">
            <summary>
            得到或设置一个值来指示是否是可选依赖
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IDependency.DefaultValue">
            <summary>
            得到或设置缺省依赖值，只有IsOptional=true时，该值才有意义
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IDependency.DependencyType">
            <summary>
            依赖类型
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IDependency.HasDependencied">
            <summary>
            是否可以通过容器得到依赖对象
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IDependency.ValueProvider">
            <summary>
            依赖对象的提供者
            </summary>
        </member>
        <member name="E:NLite.Mini.Resolving.IDependency.OnRefresh">
            <summary>
            
            </summary>
        </member>
        <member name="E:NLite.Mini.Resolving.AppSettingDependency.OnRefresh">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.IInstanceHandle">
            <summary>
            实例句柄
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceHandle.Component">
            <summary>
            组件信息
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceHandle.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceHandle.Kernel">
            <summary>
            创建该实例的内核容器
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceHandle.ReferredList">
            <summary>
            被引用的实例句柄
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceHandle.ReferenceList">
            <summary>
            引用的实例句柄
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.ReferenceManager">
            <summary>
            实例引用管理器
            </summary>
        </member>
        <member name="F:NLite.Mini.Resolving.ReferenceManager.Instance">
            <summary>
            得到单例引用管理器对象
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.RegisterHandle(System.Object,NLite.IKernel,NLite.IComponentInfo)">
            <summary>
            注册句柄
            </summary>
            <param name="instance"></param>
            <param name="registry"></param>
            <param name="component"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.UnregisterAllByKernel(NLite.IKernel)">
            <summary>
            移除指定内核创建的所有实例句柄
            </summary>
            <param name="registry"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.UnregisterHandle(System.Object)">
            <summary>
            移除实例句柄
            </summary>
            <param name="instance"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.GetHandle(System.Object)">
            <summary>
            获取对象句柄
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.RegisterReference(System.Object,System.Object)">
            <summary>
            添加对象的引用关系
            </summary>
            <param name="cfg"></param>
            <param name="reference"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.UnregisterReference(System.Object,System.Object)">
            <summary>
            移除对象的引用关系
            </summary>
            <param name="cfg"></param>
            <param name="reference"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.GetReferenceList(System.Object)">
            <summary>
            得到指定对象的引用句柄列表
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Resolving.ReferenceManager.GetReferredList(System.Object)">
            <summary>
            得到指定对象被引用的句柄列表
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mini.Resolving.ReferenceManager.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.IInstanceWrapper">
            <summary>
            实例包装器
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceWrapper.Component">
            <summary>
            组件信息
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceWrapper.Instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInstanceWrapper.Kernel">
            <summary>
            创建该实例的内核容器
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.IInjection">
            <summary>
            注入接口
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.IInjection.Inject(NLite.Mini.Context.IComponentContext)">
            <summary>
            注入
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.IInjection.IsAssignableFrom(System.Type)">
            <summary>
            判断当前被注入的Member的Type是否是指定类型的基类
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mini.Resolving.IInjection.Member">
            <summary>
            被注入的Member,如Field,Property,Method,Constructor
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IInjection.Reinjection">
            <summary>
            是否支持重新注入
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.IAppSettingInjection">
            <summary>
            AppSetting 注入接口
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.IAppSettingInjection.Inject(System.Object)">
            <summary>
            注入
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:NLite.Mini.Resolving.IAppSettingInjection.Member">
            <summary>
            被注入的Member,如Field,Property,Method,Constructor
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.IAppSettingInjection.Reinjection">
            <summary>
            是否支持重新注入
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.InjectionBase">
            <summary>
            注入基类
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.InjectionBase.Inject(NLite.Mini.Context.IComponentContext)">
            <summary>
            注入
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.InjectionBase.IsAssignableFrom(System.Type)">
            <summary>
            判断当前被注入的Member的Type是否是指定类型的基类
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Mini.Resolving.InjectionBase.Reinjection">
            <summary>
            是否支持重新注入
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.InjectionBase.Member">
            <summary>
            被注入的Member,如Field,Property,Method,Constructor
            </summary>
        </member>
        <member name="T:NLite.Mini.Resolving.FieldInjection">
            <summary>
            Field 注入
            </summary>
        </member>
        <member name="F:NLite.Mini.Resolving.FieldInjection.Setter">
            <summary>
            Field 设置器
            </summary>
        </member>
        <member name="F:NLite.Mini.Resolving.FieldInjection.Dependency">
            <summary>
            Field 所依赖的元数据
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.FieldInjection.Inject(NLite.Mini.Context.IComponentContext)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.FieldInjection.IsAssignableFrom(System.Type)">
            <summary>
            判断当前被注入的Member的Type是否是指定类型的基类
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Resolving.PropertyInjection.IsAssignableFrom(System.Type)">
            <summary>
            判断当前被注入的Member的Type是否是指定类型的基类
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Mini.Resolving.MethodInjection.IsAssignableFrom(System.Type)">
            <summary>
            判断当前被注入的Member的Type是否是指定类型的基类
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Mini.Resolving.AppSettingInjectionBase">
            <summary>
            AppSetting注入基类
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.AppSettingInjectionBase.Inject(System.Object)">
            <summary>
            注入
            </summary>
            <param name="instance"></param>
        </member>
        <member name="P:NLite.Mini.Resolving.AppSettingInjectionBase.Reinjection">
            <summary>
            是否支持重新注入
            </summary>
        </member>
        <member name="P:NLite.Mini.Resolving.AppSettingInjectionBase.Member">
            <summary>
            被注入的Member,如Field,Property,Method,Constructor
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.MemberExportException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Mini.Resolving.MemberExportException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.MemberExportException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:NLite.Mini.Resolving.MemberExportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="bindingInfo"></param>
            <param name="context"></param>
        </member>
        <member name="T:NLite.ServiceLocator">
            <summary>
            服务定位器门面类
            </summary>
        </member>
        <member name="M:NLite.ServiceLocator.Get``1">
            <summary>
            通过契约类型得到组件实例
            </summary>
            <typeparam name="TContract"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceLocator.Get``1(System.String)">
            <summary>
            通过组件Id得到指定的组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceLocator.Get``2">
            <summary>
            通过契约类型得到指定的组件实例
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceLocator.GetAll``1">
            <summary>
            得到实现指定契约的所有组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceLocator.Get(System.Type)">
            <summary>
            通过契约类型得到组件实例
            </summary>
            <param name="contract"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceLocator.Get(System.String)">
            <summary>
            通过组件Id得到指定的组件
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.ServiceLocator.Current">
            <summary>
            得到当前活动的服务定位器
            </summary>
        </member>
        <member name="T:NLite.ServiceRegistryExtensions">
            <summary>
            服务注册表扩展类
            </summary>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.HasRegister``1(NLite.IServiceRegistry)">
            <summary>
            
            </summary>
            <typeparam name="TService"></typeparam>
            <param name="registry"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterInstance``2(NLite.IServiceRegistry,System.String,``1)">
            <summary>
            通过契约类型，组件Id以及组件实例来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <param name="id"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterInstance``2(NLite.IServiceRegistry,``1)">
            <summary>
            通过契约类型，组件Id以及组件实例来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <param name="id"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterInstance(NLite.IServiceRegistry,System.Object)">
            <summary>
            注册组件实例
            </summary>
            <param name="registry"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``1(NLite.IServiceRegistry)">
            <summary>
            通过组件类型注册组件
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``1(NLite.IServiceRegistry,System.String)">
            <summary>
            通过组件类型和和组件Id来注册组件
            </summary>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register(NLite.IServiceRegistry,System.Type,System.Type)">
            <summary>
            通过契约类型和组件类型来注册组件
            </summary>
            <param name="registry"></param>
            <param name="contract"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``2(NLite.IServiceRegistry,System.String,NLite.LifestyleFlags)">
            <summary>
            通过契约类型，组件类型，组件Id以及生命周期类型来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <param name="id"></param>
            <param name="lifestyle"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``2(NLite.IServiceRegistry)">
            <summary>
            通过契约类型和组件类型来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``2(NLite.IServiceRegistry,System.String)">
            <summary>
             通过契约类型，组件类型，组件Id以及生命周期类型来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TComponent"></typeparam>
            <param name="registry"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register(NLite.IServiceRegistry,System.Type)">
            <summary>
            通过组件类型注册组件
            </summary>
            <param name="registry"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register(NLite.IServiceRegistry,System.String,System.Type)">
            <summary>
            通过组件类型和和组件Id来注册组件
            </summary>
            <param name="registry"></param>
            <param name="id"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register(NLite.IServiceRegistry,System.String,System.Type,System.Type)">
            <summary>
            通过契约类型，组件类型，组件Id以及生命周期类型来注册组件
            </summary>
            <param name="registry"></param>
            <param name="id"></param>
            <param name="contract"></param>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``1(NLite.IServiceRegistry,System.Func{System.Object})">
            <summary>
            通过契约类型以及组件的工厂方法来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <param name="registry"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.Register``1(NLite.IServiceRegistry,System.String,System.Func{System.Object})">
            <summary>
            通过契约类型，组件Id以及组件的工厂方法来注册组件
            </summary>
            <typeparam name="TContract"></typeparam>
            <param name="registry"></param>
            <param name="id"></param>
            <param name="creator"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterFromAssemblyOf``1(NLite.IServiceRegistry)">
            <summary>
            注册指定类型所在Assembly下的所有标记为"ComponentAttribue"的组件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registry"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterFromAssemblyOf``1(NLite.IServiceRegistry,System.Func{System.Type,System.Boolean})">
            <summary>
            注册指定类型所在Assembly下符合过滤条件的类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="registry"></param>
            <param name="typeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterFromAssembly(NLite.IServiceRegistry,System.Reflection.Assembly)">
            <summary>
            注册在Assembly下的所有标记为"ComponentAttribue"的组件
            </summary>
            <param name="registry"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterFromAssembly(NLite.IServiceRegistry,System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            注册在指定的assembly里面符合过滤条件的类型
            </summary>
            <param name="registry"></param>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterFromAppDomain(NLite.IServiceRegistry,System.Func{System.Type,System.Boolean})">
            <summary>
            
            </summary>
            <param name="registry"></param>
            <param name="typeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.ServiceRegistryExtensions.RegisterFromAppDomain(NLite.IServiceRegistry)">
            <summary>
            
            </summary>
            <param name="registry"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.NLiteEnvironment">
            <summary>
            NLite 环境信息
            </summary>
        </member>
        <member name="M:NLite.NLiteEnvironment.Refresh">
            <summary>
            重置DI容器
            </summary>
        </member>
        <member name="M:NLite.NLiteEnvironment.StringResource(System.String)">
            <summary>
            通过资源名称得到对应的资源值
            </summary>
            <param name="resourceName"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.NLiteEnvironment.Platform">
            <summary>
            得到当前操作系统的平台（Win32、Win64或其他） 
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.SDK_Path">
            <summary>
            得到当前.Net SDK路径
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.ApplicationPhysicalPath">
            <summary>
            得到当前程序的物理路径
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.ApplicationPath">
            <summary>
            得到或设置当前应用程序的路径
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.App_Data">
            <summary>
            得到当前程序的数据文件路径夹
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.App_LocalResources">
            <summary>
            得到当前程序的Local资源文件夹路径
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.ProductName">
            <summary>
            得到当前程序的产品名称
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.IsWeb">
            <summary>
            得到一个值用来指示当前运行环境是否是Web环境
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.ContainerType">
            <summary>
            得到或设置DI 容器的类型
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.Application">
            <summary>
            得到ApplicationState状态对象
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.Session">
            <summary>
            得到Session状态对象
            </summary>
        </member>
        <member name="P:NLite.NLiteEnvironment.Cache">
            <summary>
            得到Cache状态对象
            </summary>
        </member>
        <member name="T:NLite.OverrideAttribute">
            <summary>
            方法重载注解
            </summary>
        </member>
        <member name="M:NLite.OverrideAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="aliasNames">重载方法的别名</param>
        </member>
        <member name="P:NLite.OverrideAttribute.AliasNames">
            <summary>
            重载方法的别名
            </summary>
        </member>
        <member name="T:NLite.Reflection.IClassLoader">
            <summary>
            类型加载器
            </summary>
        </member>
        <member name="M:NLite.Reflection.IClassLoader.Load(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="assemblyName">assembly 名称</param>
            <param name="shortTypeName">类型名称</param>
            <returns>返回类型实例</returns>
        </member>
        <member name="M:NLite.Reflection.IClassLoader.Load(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="fullTypeName">类型的全名</param>
            <returns>返回类型实例</returns>
        </member>
        <member name="P:NLite.Reflection.IClassLoader.AssemblyLoader">
            <summary>
            得到或设置Assembly加载器
            </summary>
        </member>
        <member name="T:NLite.Reflection.IAssemblyLoader">
            <summary>
            Assembly 加载器
            </summary>
        </member>
        <member name="M:NLite.Reflection.IAssemblyLoader.GetAssemblies">
            <summary>
            得到所有已经加载的Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.IAssemblyLoader.Load(System.String)">
            <summary>
            从assemblyName 字符串加载Assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Reflection.IAssemblyLoader.Resolvers">
            <summary>
            得到所有Assembly解析器
            </summary>
        </member>
        <member name="T:NLite.Reflection.IAssemblyResolver">
            <summary>
            Assembly 解析器
            </summary>
        </member>
        <member name="M:NLite.Reflection.IAssemblyResolver.Resolve(System.Reflection.AssemblyName)">
            <summary>
            解析Assembly
            </summary>
        </member>
        <member name="T:NLite.Reflection.SimpleClassLoader">
            <summary>
            确省类型加载器
            </summary>
        </member>
        <member name="M:NLite.Reflection.SimpleClassLoader.Load(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="fullTypeName">类型的全名</param>
            <returns>返回类型实例</returns>
        </member>
        <member name="M:NLite.Reflection.SimpleClassLoader.Load(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="assemblyName">assembly 名称</param>
            <param name="shortTypeName">类型名称</param>
            <returns>返回类型实例</returns>
        </member>
        <member name="P:NLite.Reflection.SimpleClassLoader.AssemblyLoader">
            <summary>
            得到或设置Assembly加载器
            </summary>
        </member>
        <member name="T:NLite.Reflection.ClassLoader">
            <summary>
            类型加载器
            </summary>
        </member>
        <member name="M:NLite.Reflection.ClassLoader.Load(System.String,System.String)">
            <summary>
            加载类型
            </summary>
            <param name="assemblyName">assembly 名称</param>
            <param name="typeName">类型名称</param>
            <returns>返回类型实例</returns>
        </member>
        <member name="M:NLite.Reflection.ClassLoader.Load(System.String)">
            <summary>
            加载类型
            </summary>
            <param name="fullTypeName">类型的全名</param>
            <returns>返回类型实例</returns>
        </member>
        <member name="P:NLite.Reflection.ClassLoader.Current">
            <summary>
            得到或设置当前的ClassLoader
            </summary>
        </member>
        <member name="T:NLite.Reflection.AssemblyLoader">
            <summary>
            Assembly加载器
            </summary>
        </member>
        <member name="M:NLite.Reflection.AssemblyLoader.Load(System.String)">
            <summary>
            加载Assembly
            </summary>
            <param name="assembylyName"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.DefaultAssemblyLoader">
            <summary>
            缺省Assembly加载器
            </summary>
        </member>
        <member name="M:NLite.Reflection.DefaultAssemblyLoader.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.DefaultAssemblyLoader.Load(System.String)">
            <summary>
            加载Assembly
            </summary>
            <param name="assemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.DefaultAssemblyLoader.GetAssemblies">
            <summary>
            得到所有已经加载的Assembly
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Reflection.DefaultAssemblyLoader.Resolvers">
            <summary>
            得到Assembly解析器列表
            </summary>
        </member>
        <member name="T:NLite.Reflection.AppDomainAssemblyResolver">
            <summary>
            应用程序域Assembly解析器
            </summary>
        </member>
        <member name="M:NLite.Reflection.AppDomainAssemblyResolver.Resolve(System.Reflection.AssemblyName)">
            <summary>
            解析Assembly
            </summary>
            <param name="aname"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.AssemblysAssemblyResolver">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.AssemblysAssemblyResolver.Resolve(System.Reflection.AssemblyName)">
            <summary>
            
            </summary>
            <param name="aname"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Reflection.AssemblysAssemblyResolver.Assemblys">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.AssemblysAssemblyResolver.IncludeVersion">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Reflection.GacAssemblyResolver">
            <summary>
            Gac Assembly解析器
            </summary>
        </member>
        <member name="M:NLite.Reflection.GacAssemblyResolver.Resolve(System.Reflection.AssemblyName)">
            <summary>
            解析Assembly
            </summary>
            <param name="anme"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.AppBaseAssemblyResolver">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Reflection.FileDirectoryAssemblyResolver">
            <summary>
            文件目录Assembly解析器
            </summary>
        </member>
        <member name="M:NLite.Reflection.FileDirectoryAssemblyResolver.#ctor(System.String,System.Boolean)">
            <summary>
            创建文件目录解析器
            </summary>
            <param name="path">目录路径</param>
            <param name="includeChildDirectory">是否包含子目录</param>
        </member>
        <member name="M:NLite.Reflection.FileDirectoryAssemblyResolver.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            创建文件目录解析器
            </summary>
            <param name="path">目录路径</param>
            <param name="filter">文件过滤器</param>
            <param name="includeChildDirectory">是否包含子目录</param>
        </member>
        <member name="M:NLite.Reflection.FileDirectoryAssemblyResolver.Resolve(System.Reflection.AssemblyName)">
            <summary>
            解析Assembly
            </summary>
            <param name="aname"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Reflection.FileDirectoryAssemblyResolver.FileDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.FileDirectoryAssemblyResolver.Filter">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.FileDirectoryAssemblyResolver.IncludeChildDirectory">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.FileDirectoryAssemblyResolver.IncludeVersion">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.FileDirectoryAssemblyResolver.OnAssemblyRef">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.AppBaseAssemblyResolver.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.AppBaseAssemblyResolver.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="includeChildDirectory"></param>
        </member>
        <member name="T:NLite.Reflection.CounstructorExtensions">
            <summary>
            构造函数扩展类
            </summary>
        </member>
        <member name="M:NLite.Reflection.CounstructorExtensions.FastInvoke(System.Reflection.ConstructorInfo,System.Object[])">
            <summary>
            快速构造函数方法调用
            </summary>
            <param name="constructor">构造函数</param>
            <param name="args">参数</param>
            <returns>返回创建的对象</returns>
        </member>
        <member name="T:NLite.Reflection.CustomAttributeProviderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.CustomAttributeProviderExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            得到成员元数据
            </summary>
            <typeparam name="T">元数据类型</typeparam>
            <param name="member">成员</param>
            <param name="inherit">是否集成</param>
            <returns>返回元数据</returns>
        </member>
        <member name="M:NLite.Reflection.CustomAttributeProviderExtensions.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            得到成员元数据数组
            </summary>
            <typeparam name="T">元数据类型</typeparam>
            <param name="member">成员</param>
            <param name="inherit">是否集成</param>
            <returns>返回成员元数据数组</returns>
        </member>
        <member name="M:NLite.Reflection.CustomAttributeProviderExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            判断成员是否包含特点的元数据
            </summary>
            <typeparam name="T">元数据类型</typeparam>
            <param name="member">成员</param>
            <param name="inherit">是否继承</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.DynamicAssemblyManager">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.DynamicAssemblyManager.SaveAssembly">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.EmitHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.CreateGeneratorForPublicConstructor(System.Reflection.Emit.TypeBuilder,System.Type[])">
            <summary>
            
            </summary>
            <param name="typeBuilder"></param>
            <param name="ctrArgumentTypes"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.GetExceptionDataAndStoreInLocal(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            Generates the code to get the binderType of an object and store it in a local
            <param name="ilGenerator"></param>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.AddItemToLocalDictionary(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Object,System.Object)">
            Generates the code that adds an object to a dictionary stored in a local variable
            <param name="ilGenerator"></param>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.AddLocalToLocalDictionary(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.LocalBuilder,System.Object,System.Reflection.Emit.LocalBuilder)">
            Generates the code that adds an object from a local variable to a dictionary also stored in a local
            <param name="ilGenerator"></param>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.UnboxOrCast(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.LoadInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.LoadArgument(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.LoadValue(System.Reflection.Emit.ILGenerator,System.Object)">
            Generates the code that loads the supplied value on the stack
            This is not as simple as it seems, as different instructions need to be generated depending
            on its binderType.
            We support:
            1. All primitive types
            2. Strings
            3. Enums
            4. typeofs
            5. nulls
            6. Enumerables
            7. Delegates on static functions or any of the above
            Everything else cannot be represented as literals
            <param name="ilGenerator"></param>
            <param name="item"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.LoadEnumerable(System.Reflection.Emit.ILGenerator,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="enumerable"></param>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.LoadTypeOf(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            
            </summary>
            <param name="ilGenerator"></param>
            <param name="binderType"></param>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.LoadLocalVariable(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            将特定索引处的局部变量加载到计算堆栈上
            </summary>
            <param name="localIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.StoreLocalVariable(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>
            计算堆栈的顶部弹出当前值并将其存储到索引localIndex 处的局部变量列表中
            </summary>
            <param name="localIndex"></param>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.GetStelemOpCode(System.TypeCode)">
            <summary>
            
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.GetConvOpCode(System.TypeCode)">
            <summary>
            
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.Call(System.Reflection.Emit.ILGenerator,System.Reflection.MethodInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.Call(System.Reflection.Emit.ILGenerator,System.Reflection.ConstructorInfo)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <param name="ctor"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.EmitHelper.Return(System.Reflection.Emit.ILGenerator)">
            <summary>
            
            </summary>
            <param name="il"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Gac">
            <summary>
            Gac 工具类
            </summary>
        </member>
        <member name="M:NLite.Reflection.Gac.GetAssemblyNames">
            <summary>
            得到Gac中所有的AssemblyName
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Gac.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            
            </summary>
            <param name="asm"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Gac.IsSystemAssemblyOfType(System.Type)">
            <summary>
            
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Internal.ASM_DISPLAY_FLAGS">
            <summary>
            <see cref="M:NLite.Reflection.Internal.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,NLite.Reflection.Internal.ASM_DISPLAY_FLAGS)"/>
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.ASM_NAME">
            <summary>
            The ASM_NAME enumeration property ID describes the valid names of the name-value pairs in an assembly name.
            See the .NET Framework SDK for a description of these properties.
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.IASSEMBLYCACHE_UNINSTALL_DISPOSITION">
            <summary>
            <see cref="M:NLite.Reflection.Internal.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,NLite.Reflection.Internal.FUSION_INSTALL_REFERENCE[],System.UInt32@)"/>
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.QUERYASMINFO_FLAG">
            <summary>
            <see cref="M:NLite.Reflection.Internal.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,NLite.Reflection.Internal.ASSEMBLY_INFO@)"/>
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.IASSEMBLYCACHE_INSTALL_FLAG">
            <summary>
            <see cref="!:IAssemblyChance.InstallAssembly"/>
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.CREATE_ASM_NAME_OBJ_FLAGS">
            <summary>
            The CREATE_ASM_NAME_OBJ_FLAGS enumeration contains the following values:
            CANOF_PARSE_DISPLAY_NAME - If this flag is specified, the szAssemblyName parameter is a full assembly name and is parsed to
            	the individual properties. If the flag is not specified, szAssemblyName is the "Name" portion of the assembly name.
            CANOF_SET_DEFAULT_VALUES - If this flag is specified, certain properties, such as processor architecture, are set to
            	their default values.
            <see cref="!:AssemblyCache.CreateAssemblyNameObject"/>
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.ASM_CACHE_FLAGS">
            <summary>
            The ASM_CACHE_FLAGS enumeration contains the following values:
            ASM_CACHE_ZAP - Enumerates the cache of precompiled assemblies by using Ngen.exe.
            ASM_CACHE_GAC - Enumerates the GAC.
            ASM_CACHE_DOWNLOAD - Enumerates the assemblies that have been downloaded on-demand or that have been shadow-copied.
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.FUSION_INSTALL_REFERENCE">
            <summary>
            The FUSION_INSTALL_REFERENCE structure represents a reference that is made when an application has installed an
            assembly in the GAC.
            The fields of the structure are defined as follows:
            	cbSize - The size of the structure in bytes.
            	dwFlags - Reserved, must be zero.
            	guidScheme - The entity that adds the reference.
            	szIdentifier - A unique string that identifies the application that installed the assembly.
            	szNonCannonicalData - A string that is only understood by the entity that adds the reference.
            			The GAC only stores this string.
            Possible values for the guidScheme field can be one of the following:
            	FUSION_REFCOUNT_MSI_GUID - The assembly is referenced by an application that has been installed by using
            			Windows Installer. The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer.
            			This scheme must only be used by Windows Installer itself.
            	FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID - The assembly is referenced by an application that appears in Add/Remove
            			Programs. The szIdentifier field is the token that is used to register the application with Add/Remove programs.
            	FUSION_REFCOUNT_FILEPATH_GUID - The assembly is referenced by an application that is represented by a file in
            			the file system. The szIdentifier field is the path to this file.
            	FUSION_REFCOUNT_OPAQUE_STRING_GUID - The assembly is referenced by an application that is only represented
            			by an opaque string. The szIdentifier is this opaque string. The GAC does not perform existence checking
            			for opaque references when you remove this.
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.ASSEMBLY_INFO">
            <summary>
            The ASSEMBLY_INFO structure represents information about an assembly in the assembly cache.
            The fields of the structure are defined as follows:
            	cbAssemblyInfo - Size of the structure in bytes. Permits additions to the structure in future version of the .NET Framework.
            	dwAssemblyFlags - Indicates one or more of the ASSEMBLYINFO_FLAG_* bits.
            	uliAssemblySizeInKB - The size of the files that make up the assembly in kilobytes (KB).
            	pszCurrentAssemblyPathBuf - A pointer to a string buffer that holds the current path of the directory that contains the
            			files that make up the assembly. The path must end with a zero.
            	cchBuf - Size of the buffer that the pszCurrentAssemblyPathBug field points to.
            dwAssemblyFlags can have one of the following values:
            	ASSEMBLYINFO_FLAG__INSTALLED - Indicates that the assembly is actually installed. Always set in current version of the
            			.NET Framework.
            	ASSEMBLYINFO_FLAG__PAYLOADRESIDENT - Never set in the current version of the .NET Framework.
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.CreateAssemblyCache(NLite.Reflection.Internal.IAssemblyCache@,System.UInt32)">
            <summary>
            The key entry point for reading the assembly cache.
            </summary>
            <param name="ppAsmCache">Pointer to return IAssemblyCache</param>
            <param name="dwReserved">must be 0</param>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.CreateAssemblyNameObject(NLite.Reflection.Internal.IAssemblyName@,System.String,System.UInt32,System.IntPtr)">
            <summary>
            An instance of IAssemblyName is obtained by calling the CreateAssemblyNameObject API.
            </summary>
            <param name="ppAssemblyNameObj">Pointer to a memory location that receives the IAssemblyName pointer that is created.</param>
            <param name="szAssemblyName">A string representation of the assembly name or of a full assembly reference that is
            determined by dwFlags. The string representation can be null.</param>
            <param name="dwFlags">Zero or more of the bits that are defined in the CREATE_ASM_NAME_OBJ_FLAGS enumeration.</param>
            <param name="pvReserved"> Must be null.</param>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.CreateAssemblyEnum(NLite.Reflection.Internal.IAssemblyEnum@,System.IntPtr,NLite.Reflection.Internal.IAssemblyName,NLite.Reflection.Internal.ASM_CACHE_FLAGS,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateAssemblyEnum API, call the CreateAssemblyNameObject API.
            </summary>
            <param name="pEnum">Pointer to a memory location that contains the IAssemblyEnum pointer.</param>
            <param name="pUnkReserved">Must be null.</param>
            <param name="pName">An assembly name that is used to filter the enumeration. Can be null to enumerate all assemblies in the GAC.</param>
            <param name="dwFlags">Exactly one bit from the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pvReserved">Must be NULL.</param>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.CreateInstallReferenceEnum(NLite.Reflection.Internal.IInstallReferenceEnum@,NLite.Reflection.Internal.IAssemblyName,System.UInt32,System.IntPtr)">
            <summary>
            To obtain an instance of the CreateInstallReferenceEnum API, call the CreateInstallReferenceEnum API.
            </summary>
            <param name="ppRefEnum">A pointer to a memory location that receives the IInstallReferenceEnum pointer.</param>
            <param name="pName">The assembly name for which the references are enumerated.</param>
            <param name="dwFlags"> Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.GetCachePath(NLite.Reflection.Internal.ASM_CACHE_FLAGS,System.Text.StringBuilder,System.UInt32@)">
            <summary>
            The GetCachePath API returns the storage location of the GAC.
            </summary>
            <param name="dwCacheFlags">Exactly one of the bits defined in the ASM_CACHE_FLAGS enumeration.</param>
            <param name="pwzCachePath">Pointer to a buffer that is to receive the path of the GAC as a Unicode string.</param>
            <param name="pcchPath">Length of the pwszCachePath buffer, in Unicode characters.</param>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.CreateAssemblyCache">
            <summary>
            Use this method as a start for the GAC API
            </summary>
            <returns>IAssemblyCache COM interface</returns>
        </member>
        <member name="M:NLite.Reflection.Internal.GacCache.GetNextAssembly(NLite.Reflection.Internal.IAssemblyEnum,NLite.Reflection.Internal.IAssemblyName@)">
            <summary>
            Get the next assembly name in the current enumerator or fail
            </summary>
            <param name="enumerator"></param>
            <param name="name"></param>
            <returns>0 if the enumeration is not at its end</returns>
        </member>
        <member name="P:NLite.Reflection.Internal.GacCache.FUSION_REFCOUNT_UNINSTALL_SUBKEY_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            The assembly is referenced by an application that has been installed by using Windows Installer.
            The szIdentifier field is set to MSI, and szNonCannonicalData is set to Windows Installer.
            This scheme must only be used by Windows Installer itself.
            </summary>
        </member>
        <member name="P:NLite.Reflection.Internal.GacCache.FUSION_REFCOUNT_FILEPATH_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.Internal.GacCache.FUSION_REFCOUNT_OPAQUE_STRING_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="P:NLite.Reflection.Internal.GacCache.FUSION_REFCOUNT_MSI_GUID">
            <summary>
            GUID value for element guidScheme in the struct FUSION_INSTALL_REFERENCE
            
            </summary>
        </member>
        <member name="T:NLite.Reflection.Internal.IAssemblyCache">
            <summary>
            The IAssemblyCache interface is the top-level interface that provides access to the GAC.
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCache.UninstallAssembly(System.UInt32,System.String,NLite.Reflection.Internal.FUSION_INSTALL_REFERENCE[],System.UInt32@)">
            <summary>
            The IAssemblyCache::UninstallAssembly method removes a reference to an assembly from the GAC.
            If other applications hold no other references to the assembly, the files that make up the assembly are removed from the GAC.
            </summary>
            <param name="dwFlags">No flags defined. Must be zero.</param>
            <param name="pszAssemblyName">The name of the assembly. A zero-ended Unicode string.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. Although this is not recommended,
            	this parameter can be null. The assembly is installed without an application reference, or all existing application
            	references are gone.</param>
            <param name="pulDisposition">Pointer to an integer that indicates the action that is performed by the function.</param>
            <returns>The return values are defined as follows:
            	S_OK - The assembly has been uninstalled.
            	S_FALSE - The operation succeeded, but the assembly was not removed from the GAC.
            	The reason is described in pulDisposition.</returns>
            <remarks>
            NOTE: If pulDisposition is not null, pulDisposition contains one of the following values:
            	IASSEMBLYCACHE_UNINSTALL_DISPOSITION_UNINSTALLED - The assembly files have been removed from the GAC.
            	IASSEMBLYCACHE_UNINSTALL_DISPOSITION_STILL_IN_USE - An application is using the assembly.
            		This value is returned on Microsoft Windows 95 and Microsoft Windows 98.
            	IASSEMBLYCACHE_UNINSTALL_DISPOSITION_ALREADY_UNINSTALLED - The assembly does not exist in the GAC.
            	IASSEMBLYCACHE_UNINSTALL_DISPOSITION_DELETE_PENDING - Not used.
            	IASSEMBLYCACHE_UNINSTALL_DISPOSITION_HAS_INSTALL_REFERENCES - The assembly has not been removed from the GAC because
            		another application reference exists.
            	IASSEMBLYCACHE_UNINSTALL_DISPOSITION_REFERENCE_NOT_FOUND - The reference that is specified in pRefData is not found
            		in the GAC.
            </remarks>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCache.QueryAssemblyInfo(System.UInt32,System.String,NLite.Reflection.Internal.ASSEMBLY_INFO@)">
            <summary>
            The IAssemblyCache::QueryAssemblyInfo method retrieves information about an assembly from the GAC.
            </summary>
            <param name="dwFlags">One of QUERYASMINFO_FLAG_VALIDATE or QUERYASMINFO_FLAG_GETSIZE:
            	*_VALIDATE - Performs validation of the files in the GAC against the assembly manifest, including hash verification
            		and strong name signature verification.
            	*_GETSIZE - Returns the size of all files in the assembly (disk footprint). If this is not specified, the
            		ASSEMBLY_INFO::uliAssemblySizeInKB field is not modified.</param>
            <param name="pszAssemblyName"></param>
            <param name="pAsmInfo"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,NLite.Reflection.Internal.IAssemblyCacheItem@,System.String)">
            <summary>
            Undocumented
            </summary>
            <param name="dwFlags"></param>
            <param name="pvReserved"></param>
            <param name="ppAsmItem"></param>
            <param name="pszAssemblyName"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCache.CreateAssemblyScavenger(System.Object@)">
            <summary>
            Undocumented
            </summary>
            <param name="ppAsmScavenger"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCache.InstallAssembly(System.UInt32,System.String,NLite.Reflection.Internal.FUSION_INSTALL_REFERENCE[])">
            <summary>
            The IAssemblyCache::InstallAssembly method adds a new assembly to the GAC. The assembly must be persisted in the file
            system and is copied to the GAC.
            </summary>
            <param name="dwFlags">At most, one of the bits of the IASSEMBLYCACHE_INSTALL_FLAG_* values can be specified:
            	*_REFRESH - If the assembly is already installed in the GAC and the file version numbers of the assembly being
            	installed are the same or later, the files are replaced.
            	*_FORCE_REFRESH - The files of an existing assembly are overwritten regardless of their version number.</param>
            <param name="pszManifestFilePath"> A string pointing to the dynamic-linked library (DLL) that contains the assembly manifest.
            Other assembly files must reside in the same directory as the DLL that contains the assembly manifest.</param>
            <param name="pRefData">A pointer to a FUSION_INSTALL_REFERENCE that indicates the application on whose behalf the
            assembly is being installed. Although this is not recommended, this parameter can be null, but this leaves the assembly
            without any application reference.</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Internal.IAssemblyName">
            <summary>
            The IAssemblyName interface represents an assembly name. An assembly name includes a predetermined set of name-value pairs.
            The assembly name is described in detail in the .NET Framework SDK.
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.SetProperty(NLite.Reflection.Internal.ASM_NAME,System.IntPtr,System.UInt32)">
            <summary>
            The IAssemblyName::SetProperty method adds a name-value pair to the assembly name, or, if a name-value pair
            with the same name already exists, modifies or deletes the value of a name-value pair.
            </summary>
            <param name="PropertyId">The ID that represents the name part of the name-value pair that is to be
            added or to be modified. Valid property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that contains the value of the property.</param>
            <param name="cbProperty">The length of the pvProperty buffer in bytes. If cbProperty is zero, the name-value pair
            is removed from the assembly name.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.GetProperty(NLite.Reflection.Internal.ASM_NAME,System.IntPtr,System.UInt32@)">
            <summary>
            The IAssemblyName::GetProperty method retrieves the value of a name-value pair in the assembly name that specifies the name.
            </summary>
            <param name="PropertyId">The ID that represents the name of the name-value pair whose value is to be retrieved.
            Specified property IDs are defined in the ASM_NAME enumeration.</param>
            <param name="pvProperty">A pointer to a buffer that is to contain the value of the property.</param>
            <param name="pcbProperty">The length of the pvProperty buffer, in bytes.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.Finalize">
            <summary>
            The IAssemblyName::Finalize method freezes an assembly name. Additional calls to IAssemblyName::SetProperty are
            unsuccessful after this method has been called.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.GetDisplayName(System.Text.StringBuilder,System.UInt32@,NLite.Reflection.Internal.ASM_DISPLAY_FLAGS)">
            <summary>
            The IAssemblyName::GetDisplayName method returns a string representation of the assembly name.
            </summary>
            <param name="szDisplayName">A pointer to a buffer that is to contain the display name. The display name is returned in Unicode.</param>
            <param name="pccDisplayName">The size of the buffer in characters (on input). The length of the returned display name (on return).</param>
            <param name="dwDisplayFlags">One or more of the bits defined in the ASM_DISPLAY_FLAGS enumeration:
            	*_VERSION - Includes the version number as part of the display name.
            	*_CULTURE - Includes the culture.
            	*_PUBLIC_KEY_TOKEN - Includes the public key token.
            	*_PUBLIC_KEY - Includes the public key.
            	*_CUSTOM - Includes the custom part of the assembly name.
            	*_PROCESSORARCHITECTURE - Includes the processor architecture.
            	*_LANGUAGEID - Includes the language ID.
            </param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.BindToObject(System.Guid@,System.Object,System.Object,System.String,System.Int64,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Undocumented
            </summary>
            <param name="refIID"></param>
            <param name="pUnkSink"></param>
            <param name="pUnkContext"></param>
            <param name="szCodeBase"></param>
            <param name="llFlags"></param>
            <param name="pvReserved"></param>
            <param name="cbReserved"></param>
            <param name="ppv"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.GetName(System.UInt32@,System.Text.StringBuilder)">
            <summary>
            The IAssemblyName::GetName method returns the name part of the assembly name.
            </summary>
            <param name="lpcwBuffer">Size of the pwszName buffer (on input). Length of the name (on return).</param>
            <param name="pwzName">Pointer to the buffer that is to contain the name part of the assembly name.</param>
            <returns></returns>
            <remarks>http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpguide/html/cpcondefaultmarshalingforstrings.asp</remarks>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.GetVersion(System.UInt32@,System.UInt32@)">
            <summary>
            The IAssemblyName::GetVersion method returns the version part of the assembly name.
            </summary>
            <param name="pdwVersionHi">Pointer to a DWORD that contains the upper 32 bits of the version number.</param>
            <param name="pdwVersionLow">Pointer to a DWORD that contain the lower 32 bits of the version number.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.IsEqual(NLite.Reflection.Internal.IAssemblyName,NLite.Reflection.Internal.ASM_CMP_FLAGS)">
            <summary>
            The IAssemblyName::IsEqual method compares the assembly name to another assembly names.
            </summary>
            <param name="pName">The assembly name to compare to.</param>
            <param name="dwCmpFlags">Indicates which part of the assembly name to use in the comparison.
            Values are one or more of the bits defined in the ASM_CMP_FLAGS enumeration.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyName.Clone(NLite.Reflection.Internal.IAssemblyName@)">
            <summary>
            The IAssemblyName::Clone method creates a copy of an assembly name.
            </summary>
            <param name="pName"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Internal.IAssemblyEnum">
            <summary>
            The IAssemblyEnum interface enumerates the assemblies in the GAC.
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyEnum.GetNextAssembly(System.IntPtr,NLite.Reflection.Internal.IAssemblyName@,System.UInt32)">
            <summary>
            The IAssemblyEnum::GetNextAssembly method enumerates the assemblies in the GAC.
            </summary>
            <param name="pvReserved">Must be null.</param>
            <param name="ppName">Pointer to a memory location that is to receive the interface pointer to the assembly
            name of the next assembly that is enumerated.</param>
            <param name="dwFlags">Must be zero.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyEnum.Reset">
            <summary>
            Undocumented. Best guess: reset the enumeration to the first assembly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyEnum.Clone(NLite.Reflection.Internal.IAssemblyEnum@)">
            <summary>
            Undocumented. Create a copy of the assembly enum that is independently enumerable.
            </summary>
            <param name="ppEnum"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Internal.IInstallReferenceItem">
            <summary>
            The IInstallReferenceItem interface represents a reference that has been set on an assembly in the GAC.
            Instances of IInstallReferenceIteam are returned by the IInstallReferenceEnum interface.
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.IInstallReferenceItem.GetReference(NLite.Reflection.Internal.FUSION_INSTALL_REFERENCE[]@,System.UInt32,System.IntPtr)">
            <summary>
            The IInstallReferenceItem::GetReference method returns a FUSION_INSTALL_REFERENCE structure.
            </summary>
            <param name="ppRefData">A pointer to a FUSION_INSTALL_REFERENCE structure. The memory is allocated by the GetReference
            method and is freed when IInstallReferenceItem is released. Callers must not hold a reference to this buffer after the
            IInstallReferenceItem object is released.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Internal.IInstallReferenceEnum">
            <summary>
            The IInstallReferenceEnum interface enumerates all references that are set on an assembly in the GAC.
            NOTE: References that belong to the assembly are locked for changes while those references are being enumerated.
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.IInstallReferenceEnum.GetNextInstallReferenceItem(NLite.Reflection.Internal.IInstallReferenceItem@,System.UInt32,System.IntPtr)">
            <summary>
            IInstallReferenceEnum::GetNextInstallReferenceItem returns the next reference information for an assembly.
            </summary>
            <param name="ppRefItem">Pointer to a memory location that receives the IInstallReferenceItem pointer.</param>
            <param name="dwFlags">Must be zero.</param>
            <param name="pvReserved">Must be null.</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Internal.IAssemblyCacheItem">
            <summary>
            Undocumented. Probably only for internal use.
            <see cref="M:NLite.Reflection.Internal.IAssemblyCache.CreateAssemblyCacheItem(System.UInt32,System.IntPtr,NLite.Reflection.Internal.IAssemblyCacheItem@,System.String)"/>
            </summary>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCacheItem.CreateStream(System.UInt32,System.String,System.UInt32,System.UInt32,System.Runtime.InteropServices.UCOMIStream@,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pszStreamName"></param>
            <param name="dwFormat"></param>
            <param name="dwFormatFlags"></param>
            <param name="ppIStream"></param>
            <param name="puliMaxSize"></param>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCacheItem.Commit(System.UInt32,System.Int64@)">
            <summary>
            Undocumented.
            </summary>
            <param name="dwFlags"></param>
            <param name="pulDisposition"></param>
        </member>
        <member name="M:NLite.Reflection.Internal.IAssemblyCacheItem.AbortItem">
            <summary>
            Undocumented.
            </summary>
        </member>
        <member name="T:NLite.Reflection.GetterExtensions">
            <summary>
            访问器扩展类
            </summary>
        </member>
        <member name="M:NLite.Reflection.GetterExtensions.Get(System.Reflection.MemberInfo,System.Object)">
            <summary>
            快速调用访问器方法
            </summary>
            <param name="member">成员访问器</param>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Func">
            <summary>
            函数委托
            </summary>
            <param name="target">目标对象</param>
            <param name="arguments">函数参数</param>
            <returns>函数返回值</returns>
        </member>
        <member name="T:NLite.Reflection.Proc">
            <summary>
            过程委托
            </summary>
            <param name="target">目标对象</param>
            <param name="arguments">过程参数</param>
        </member>
        <member name="T:NLite.Reflection.Getter">
            <summary>
            访问器委托
            </summary>
            <param name="target">目标对象</param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.Setter">
            <summary>
            设置器委托
            </summary>
            <param name="target">目标对象</param>
            <param name="value">设置器参数</param>
        </member>
        <member name="T:NLite.Reflection.ConstructorHandler">
            <summary>
            构造函数委托
            </summary>
            <param name="arguments">构造函数参数列表</param>
            <returns>返回创建的对象</returns>
        </member>
        <member name="T:NLite.Reflection.DefaultConstructorHandler">
            <summary>
            缺省构造函数委托
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.DynamicMethodFactory">
            <summary>
            动态方法工厂
            </summary>
        </member>
        <member name="M:NLite.Reflection.DynamicMethodFactory.GetProc(System.Reflection.MethodInfo)">
            <summary>
            得到过程委托
            </summary>
            <param name="method">方法对象</param>
            <returns>返回过程委托</returns>
        </member>
        <member name="M:NLite.Reflection.DynamicMethodFactory.GetFunc(System.Reflection.MethodInfo)">
            <summary>
            得到函数委托
            </summary>
            <param name="method">方法对象</param>
            <returns>返回函数委托</returns>
        </member>
        <member name="M:NLite.Reflection.DynamicMethodFactory.GetCreator(System.Reflection.ConstructorInfo)">
            <summary>
            得到构造函数委托
            </summary>
            <param name="constructor">构造函数</param>
            <returns>返回构造函数委托</returns>
        </member>
        <member name="M:NLite.Reflection.DynamicMethodFactory.GetDefaultCreator(System.Type)">
            <summary>
            得到缺省构造函数委托
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.DynamicMethodFactory.GetGetter(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.DynamicMethodFactory.GetSetter(System.Reflection.MemberInfo)">
            <summary>
            得到设置器委托
            </summary>
            <param name="member">成员</param>
            <returns>返回设置器委托</returns>
        </member>
        <member name="T:NLite.Reflection.MemberModel">
            <summary>
            成员元数据模型
            </summary>
        </member>
        <member name="M:NLite.Reflection.MemberModel.GetValue(System.Object)">
            <summary>
            得到成员的值
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.MemberModel.SetValue(System.Object,System.Object)">
            <summary>
            设置成员的值
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="P:NLite.Reflection.MemberModel.Type">
            <summary>
            成员类型
            </summary>
        </member>
        <member name="P:NLite.Reflection.MemberModel.Member">
            <summary>
            成员
            </summary>
        </member>
        <member name="P:NLite.Reflection.MemberModel.SetMember">
            <summary>
            成员的设置器
            </summary>
        </member>
        <member name="P:NLite.Reflection.MemberModel.GetMember">
            <summary>
            成员的读取器
            </summary>
        </member>
        <member name="P:NLite.Reflection.MemberModel.Name">
            <summary>
            成员名称
            </summary>
        </member>
        <member name="T:NLite.Reflection.MemberFlags">
            <summary>
            成员的绑定标识。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.AnyFlags">
            <summary>
            所有实例成员和静态成员（区分大小写）。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.InstanceFlags">
            <summary>
            所有实例成员（区分大小写）。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.InstanceGetPropertyFlags">
            <summary>
            所有可获取的实例属性（区分大小写）。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.InstanceSetPropertyFlags">
            <summary>
            所有可设置的实例属性（区分大小写）。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.StaticFlags">
            <summary>
            所有静态成员（区分大小写）。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.StaticGetPropertyFlags">
            <summary>
            所有可获取的静态属性（区分大小写）。
            </summary>
        </member>
        <member name="F:NLite.Reflection.MemberFlags.StaticSetPropertyFlags">
            <summary>
            所有可设置的静态属性（区分大小写）。
            </summary>
        </member>
        <member name="T:NLite.Reflection.TypeMemberFactory">
            <summary>
            类型成员工厂
            </summary>
        </member>
        <member name="M:NLite.Reflection.TypeMemberFactory.GetGetMembers(System.Type)">
            <summary>
            得到指定类型具有GetValue的成员列表
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeMemberFactory.GetGetMembers(System.Type,System.Reflection.BindingFlags)">
            <summary>
            得到指定类型具有GetValue的成员列表
            </summary>
            <param name="binderType"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeMemberFactory.GetSetMembers(System.Type)">
            <summary>
            得到指定类型具有SetValue的成员列表
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeMemberFactory.GetSetMembers(System.Type,System.Reflection.BindingFlags)">
            <summary>
            得到指定类型具有SetValue的成员列表
            </summary>
            <param name="binderType"></param>
            <param name="bindingFlags"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Reflection.FuncExtensions">
            <summary>
            函数扩展类
            </summary>
        </member>
        <member name="M:NLite.Reflection.FuncExtensions.FastFuncInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            快速函数调用
            </summary>
            <param name="method">方法</param>
            <param name="target">目标对象</param>
            <param name="args">参数列表</param>
            <returns>返回方法调用结果</returns>
        </member>
        <member name="T:NLite.Reflection.ReflectionService">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.Assembly(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetAllProperties(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetInheriteDeep(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="parentType"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetParameterTypes(System.Reflection.ParameterInfo[])">
            <summary>
            
            </summary>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetParameterTypes(System.Reflection.MethodBase)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.FindEligibleConstructor(System.Type,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            
            </summary>
            <param name="impType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.FindEligibleConstructor(System.Type,System.Object[])">
            <summary>
            
            </summary>
            <param name="impType"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.FindMember(System.Linq.Expressions.LambdaExpression)">
            <summary>
            
            </summary>
            <param name="lambdaExpression"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetMemberType(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.IsOpenGenericType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.IsCloseGenericType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.HasOpenGenericParameters(System.Reflection.MethodBase)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetNamedGenericParameter(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="genericParameterName"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.MakeCloseGenericType(System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="genericArgTypes"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.Proc(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="procName"></param>
            <param name="args"></param>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.Func(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="funcName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.Func``1(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="funcName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetProperty``1(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.GetProperty(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.ReflectionService.SetProperty(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="propertyName"></param>
            <param name="value"></param>
            <param name="index"></param>
        </member>
        <member name="T:NLite.Reflection.SetterExtensions">
            <summary>
            设置器扩展
            </summary>
        </member>
        <member name="M:NLite.Reflection.SetterExtensions.Set(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            快速设置成员内容
            </summary>
            <param name="member">成员</param>
            <param name="target">目标对象</param>
            <param name="value">成员值</param>
        </member>
        <member name="T:NLite.Reflection.TypeHelper">
            <summary>
            类型助手
            </summary>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsNullable(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.GetNonNullableType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.GetDefault(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsReadOnly(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.GetElementType(System.Type)">
            <summary>
            得到集合元素类型
            </summary>
            <param name="enumerableType">集合类型</param>
            <returns>返回集合元素类型</returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.GetEnumType(System.Type)">
            <summary>
            得到枚举类型
            </summary>
            <param name="enumType">枚举类型或Nullable枚举类型</param>
            <returns>返回枚举类型</returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.CanConvertToEnum(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.GetElementType(System.Type,System.Collections.IEnumerable)">
            <summary>
            
            </summary>
            <param name="enumerableType"></param>
            <param name="enumerable"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsGuidType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsEnumType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsFlagsEnum(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsGenericDictionaryType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsIDictionaryType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsDictionaryType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.GetGenericDictionaryType(System.Type)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Reflection.TypeHelper.IsCollectionTypeExcludeStringAndDictionaryType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Types">
            <summary>
            常用类型
            </summary>
        </member>
        <member name="F:NLite.Types.Object">
            <summary>
            Object 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Type">
            <summary>
            Type 类型
            </summary>
        </member>
        <member name="F:NLite.Types.String">
            <summary>
            Stirng 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Char">
            <summary>
            Char 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Boolean">
            <summary>
            Boolean 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Byte">
            <summary>
            Byte 类型
            </summary>
        </member>
        <member name="F:NLite.Types.ByteArray">
            <summary>
            Byte 数组类型
            </summary>
        </member>
        <member name="F:NLite.Types.SByte">
            <summary>
            SByte 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Int16">
            <summary>
            Int16 类型
            </summary>
        </member>
        <member name="F:NLite.Types.UInt16">
            <summary>
            UInt16 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Int32">
            <summary>
            Int32 类型
            </summary>
        </member>
        <member name="F:NLite.Types.UInt32">
            <summary>
            UInt32 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Int64">
            <summary>
            Int64 类型
            </summary>
        </member>
        <member name="F:NLite.Types.UInt64">
            <summary>
            UInt64 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Double">
            <summary>
            Double 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Single">
            <summary>
            Single 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Decimal">
            <summary>
            Decimal 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Guid">
            <summary>
            Guid 类型
            </summary>
        </member>
        <member name="F:NLite.Types.DateTime">
            <summary>
            DateTime 类型
            </summary>
        </member>
        <member name="F:NLite.Types.TimeSpan">
            <summary>
            TimeSpan 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Nullable">
            <summary>
            Nullable 类型
            </summary>
        </member>
        <member name="F:NLite.Types.ValueType">
            <summary>
            ValueType 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Void">
            <summary>
            void 类型
            </summary>
        </member>
        <member name="F:NLite.Types.DBNull">
            <summary>
            DBNull 类型
            </summary>
        </member>
        <member name="F:NLite.Types.Delegate">
            <summary>
            Delegate 类型
            </summary>
        </member>
        <member name="F:NLite.Types.ByteEnumerable">
            <summary>
            ByteEnumerable 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IEnumerableofT">
            <summary>
            IEnumerable 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IEnumerable">
            <summary>
            IEnumerable 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IListSource">
            <summary>
            IListSource 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IDictionary">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IDictionaryOfT">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:NLite.Types.DictionaryOfT">
            <summary>
            Dictionary 类型
            </summary>
        </member>
        <member name="F:NLite.Types.StringDictionary">
            <summary>
            StringDictionary 类型
            </summary>
        </member>
        <member name="F:NLite.Types.NameValueCollection">
            <summary>
            NameValueCollection 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IDataReader">
            <summary>
            IDataReader 类型
            </summary>
        </member>
        <member name="F:NLite.Types.DataTable">
            <summary>
            DataTable 类型
            </summary>
        </member>
        <member name="F:NLite.Types.DataRow">
            <summary>
            DataRow 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IDictionaryOfStringAndObject">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="F:NLite.Types.IDictionaryOfStringAndString">
            <summary>
            IDictionary 类型
            </summary>
        </member>
        <member name="T:NLite.Result">
            <summary>
            结果对象
            </summary>
        </member>
        <member name="M:NLite.Result.#ctor(System.Boolean,System.Exception)">
            <summary>
            创建结果对象
            </summary>
            <param name="success">是否成功</param>
            <param name="ex">异常对象</param>
        </member>
        <member name="M:NLite.Result.Exception(System.Action{System.Exception})">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Result.Success(System.Action)">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Result.OK">
            <summary>
            成功结果
            </summary>
        </member>
        <member name="T:NLite.Result`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLite.Result`1.#ctor(System.Boolean,System.Exception,`0)">
            <summary>
            
            </summary>
            <param name="success"></param>
            <param name="ex"></param>
            <param name="param"></param>
        </member>
        <member name="M:NLite.Result`1.Exception(System.Action{System.Exception})">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Result`1.Success(System.Action{`0})">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.BoolMessage">
            <summary>
            Combines a boolean succes/fail flag with a error/status message.
            </summary>
        </member>
        <member name="M:NLite.BoolMessage.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.BoolMessage.Success">
            <summary>
            Success / failure ?
            </summary>
        </member>
        <member name="P:NLite.BoolMessage.ErrorState">
            <summary>
            Get error collection
            </summary>
        </member>
        <member name="P:NLite.BoolMessage.Data">
            <summary>
            Get or set data
            </summary>
        </member>
        <member name="P:NLite.BoolMessage.Exception">
            <summary>
            Get or set Execption
            </summary>
        </member>
        <member name="T:NLite.BoolMessage`1">
            <summary>
            Combines a boolean succes/fail flag with a error/status message.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:NLite.BoolMessage`1.Data">
            <summary>
            Get or set data
            </summary>
        </member>
        <member name="T:NLite.RuntimeTypeHandleExtensions">
            <summary>
            Runtime Type Handle 扩展类
            </summary>
        </member>
        <member name="M:NLite.RuntimeTypeHandleExtensions.Type(System.RuntimeTypeHandle)">
            <summary>
            
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Security.SymmetricAlgorithmType">
            <summary>
            对称算法类型
            </summary>
        </member>
        <member name="T:NLite.Security.Cryptographer">
            <summary>
            对称加密
            </summary>
        </member>
        <member name="F:NLite.Security.Cryptographer.DEFAULT_KEY">
            <summary>
            缺省密钥键
            </summary>
        </member>
        <member name="F:NLite.Security.Cryptographer.DEFAULT_IV">
            <summary>
            缺省初始化向量IV
            </summary>
        </member>
        <member name="M:NLite.Security.Cryptographer.SymmetricEncrpyt(System.String)">
            <summary>
            对称加密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Security.Cryptographer.SymmetricDecrpyt(System.String)">
            <summary>
            对称解密
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Security.Cryptographer.MD5Encrpyt(System.String)">
            <summary>
            MD5加密类,注意经MD5加密过的信息是不能转换回原始数据的
            ,请不要在用户敏感的信息中使用此加密技术,比如用户的密码,
            并且需要找会密码的功能请尽量使用对称加密
            </summary>
        </member>
        <member name="M:NLite.Security.Cryptographer.SHA1Encrpyt(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Security.Cryptographer.Key">
            <summary>
            密钥键
            </summary>
        </member>
        <member name="P:NLite.Security.Cryptographer.IV">
            <summary>
            初始化向量IV
            </summary>
        </member>
        <member name="P:NLite.Security.Cryptographer.SymmetricAlgorithmType">
            <summary>
            对称算法类型
            </summary>
        </member>
        <member name="M:NLite.Serialization.MetadataBuilder.BuildName(System.Type)">
            <summary>
            简化限定名称
            </summary>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Serialization.ContentHandlerTable">
            <summary>
            内容类型处理器映射表
            </summary>
        </member>
        <member name="M:NLite.Serialization.ContentHandlerTable.GetHandler(System.String)">
            <summary>
            得到特定类型的处理器
            </summary>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Serialization.ContentHandlerTable.Items">
            <summary>
            类型处理器字典
            </summary>
        </member>
        <member name="T:NLite.Serialization.JsonSerializer">
            <summary>
            Json序列化器
            </summary>
        </member>
        <member name="M:NLite.Serialization.JsonSerializer.SetSerializer(NLite.Serialization.ISerializer)">
            <summary>
            设置序列化器为当前的
            </summary>
            <param name="serializer"></param>
        </member>
        <member name="M:NLite.Serialization.JsonSerializer.Serialize(System.Object)">
            <summary>
            把一个对象序列化到一个串种
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Serialization.JsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            把一个串中的内容反序列化到特定类型的对象中
            </summary>
            <param name="str"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Serialization.JsonSerializer.Current">
            <summary>
            得到当前的序列化器
            </summary>
        </member>
        <member name="T:NLite.Serialization.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:NLite.Serialization.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NLite.Serialization.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:NLite.Serialization.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:NLite.Serialization.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:NLite.Serialization.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:NLite.Serialization.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:NLite.Serialization.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:NLite.Serialization.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:NLite.Serialization.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:NLite.Serialization.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:NLite.Serialization.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="M:NLite.Serialization.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:NLite.Serialization.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:NLite.Serialization.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:NLite.Serialization.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:NLite.Serialization.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:NLite.Serialization.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:NLite.Serialization.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:NLite.Serialization.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:NLite.Serialization.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:NLite.Serialization.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:NLite.Serialization.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="object">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:NLite.Serialization.SimpleJson.SerializeObject(System.Object,NLite.Serialization.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:NLite.Serialization.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
        <member name="M:NLite.Serialization.XmlSerializer.#ctor">
            <summary>
            Default constructor, does not specify namespace
            </summary>
        </member>
        <member name="M:NLite.Serialization.XmlSerializer.#ctor(System.String)">
            <summary>
            Specify the namespaced to be used when serializing
            </summary>
            <param name="namespace">XML namespace</param>
        </member>
        <member name="M:NLite.Serialization.XmlSerializer.Serialize(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Serialization.XmlSerializer.Deserialize(System.String,System.Type)">
            <summary>
            
            </summary>
            <param name="strDoc"></param>
            <param name="binderType"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Serialization.XmlSerializer.ContentType">
            <summary>
            Content binderType for serialized content
            </summary>
        </member>
        <member name="T:NLite.StringExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.HasValue(System.String)">
            <summary>
            Check that a string is not null or empty
            </summary>
            <param name="input">String to check</param>
            <returns>bool</returns>
        </member>
        <member name="M:NLite.StringExtensions.AsNamespaced(System.String,System.String)">
            <summary>
            Returns the name of an element with the namespace if specified
            </summary>
            <param name="name">Element name</param>
            <param name="namespace">XML Namespace</param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.RemoveUnderscoresAndDashes(System.String)">
            <summary>
            Remove underscores from a string
            </summary>
            <param name="input">String to process</param>
            <returns>string</returns>
        </member>
        <member name="M:NLite.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.FirstLower(System.String)">
            <summary>
            字符串首字母小写
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.FirstUpper(System.String)">
            <summary>
            字符串首字母大写
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.Surround(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="prefix"></param>
            <param name="target"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.Matches(System.String,System.Char)">
            <summary>
            返回所有匹配指定前缀的字符串
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.Matches(System.String,System.String,System.String)">
            <summary>
            返回所有匹配指定前缀与后缀的字符串
            </summary>
            <param name="src"></param>
            <param name="prefix"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.MatchAntExpressions(System.String)">
            <summary>
            返回所有匹配前缀为'${'，后缀为'}'的蚂蚁表达式
            </summary>
            <exception cref="T:System.FormatException">
            如果提供的表达式为空(<c>${}</c>).
            </exception>
        </member>
        <member name="M:NLite.StringExtensions.SetAntExpression(System.String,System.String,System.Object)">
            <summary>
            将指定字符串中的蚂蚁表达式替换成指定的内容
            </summary>
            <param name="src"></param>
            <param name="expression">蚂蚁表达式</param>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.LeftOf(System.String,System.String)">
             <summary>
            返回匹配项在指定字符串中第一次出现位置左边的内容
             </summary>
        </member>
        <member name="M:NLite.StringExtensions.LeftOf(System.String,System.Char)">
             <summary>
            返回匹配项在指定字符串中第一次出现位置左边的内容
             </summary>
        </member>
        <member name="M:NLite.StringExtensions.LeftOf(System.String,System.String,System.Int32)">
            <summary>
            返回匹配项在指定字符串中第‘n’次出现位置左边的内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.LeftOf(System.String,System.Char,System.Int32)">
            <summary>
            返回匹配项在指定字符串中第‘n’次出现位置左边的内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.RightOf(System.String,System.String)">
            <summary>
            返回匹配项在指定字符串中第一次出现位置右边的内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.RightOf(System.String,System.Char)">
            <summary>
            返回匹配项在指定字符串中第一次出现位置右边的内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.RightOf(System.String,System.String,System.Int32)">
            <summary>
            返回匹配项在指定字符串中第n次出现位置右边的内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.RightOf(System.String,System.Char,System.Int32)">
            <summary>
            返回字符在指定字符串中第n次出现位置右边的内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.Between(System.String,System.Char,System.Char)">
            <summary>
            返回字符串中两个匹配项（字符）间的子串
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.Between(System.String,System.String,System.String)">
            <summary>
            返回字符串中两个匹配项（字符串）间的子串
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.Count(System.String,System.Char,System.Boolean)">
            <summary>
            返回字符在字符串中出现的次数
            </summary>
            <param name="src"></param>
            <param name="c"></param>
            <param name="flag">是否处理转义字符</param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.Count(System.String,System.Char)">
            <summary>
            返回字符在字符串中出现的次数
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.LastLeftOf(System.String,System.Char)">
            <summary>
            返回字符在指定字符串中最后一次次出现位置的左边内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.LastRightOf(System.String,System.Char)">
            <summary>
            返回字符在指定字符串中最后一次次出现位置的右边内容
            </summary>
        </member>
        <member name="M:NLite.StringExtensions.GetBytes(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetBytesUTF8(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetBytesASCII(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetString(System.Byte[])">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetStringUTF8(System.Byte[])">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetStringUTF8(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.StringExtensions.GetStringASCII(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="arr"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.Text.Indentation">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Text.Indentation.Same">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Text.Indentation.Inner">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Text.Indentation.Outer">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Text.StringBuffer">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Text.StringBuffer.#ctor(System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:NLite.Text.StringBuffer.AppendLine">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Text.StringBuffer.AppendLine(NLite.Text.Indentation)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Text.StringBuffer.Append(System.String)">
            <summary>
            
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Text.StringBuffer.AppendFormat(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Text.StringBuffer.Indent(NLite.Text.Indentation)">
            <summary>
            
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Text.StringBuffer.Append(System.Action)">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Text.StringBuffer.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:NLite.Text.StringBuffer.Buffer">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.StringFormatter">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.StringFormatter.Register(NLite.ITagFormatProvider)">
            <summary>
            
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:NLite.StringFormatter.Format(System.String,System.String[])">
            <summary>
            
            </summary>
            <param name="fmt"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.SynchronizeService">
            <summary>
            同步服务
            </summary>
        </member>
        <member name="M:NLite.SynchronizeService.Send(System.Delegate,System.Object[])">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <param name="args"></param>
        </member>
        <member name="M:NLite.SynchronizeService.Post(System.Delegate,System.Object[])">
            <summary>
            
            </summary>
            <param name="handler"></param>
            <param name="args"></param>
        </member>
        <member name="P:NLite.SynchronizeService.SynchronizeObject">
            <summary>
            得到或设置同步对象
            </summary>
        </member>
        <member name="T:NLite.Threading.AtomicInteger">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="initialValue"></param>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.GetAndSet(System.Int32)">
            <summary>
            
            </summary>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.CompareAndSet(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="expect"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.GetAndIncrement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.GetAndDecrement">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.GetAndAdd(System.Int32)">
            <summary>
            
            </summary>
            <param name="delta"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Implicit(NLite.Threading.AtomicInteger)~System.Int32">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Implicit(System.Int32)~NLite.Threading.AtomicInteger">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Increment(NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Decrement(NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Addition(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Addition(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Subtraction(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Subtraction(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Equality(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Equality(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Equality(System.Int32,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Inequality(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Inequality(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_Inequality(System.Int32,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_GreaterThan(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_GreaterThan(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_GreaterThan(System.Int32,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_GreaterThanOrEqual(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_GreaterThanOrEqual(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_GreaterThanOrEqual(System.Int32,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_LessThanOrEqual(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_LessThanOrEqual(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_LessThanOrEqual(System.Int32,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_LessThan(NLite.Threading.AtomicInteger,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_LessThan(NLite.Threading.AtomicInteger,System.Int32)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.op_LessThan(System.Int32,NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="l"></param>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.Equals(NLite.Threading.AtomicInteger)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicInteger.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Threading.AtomicInteger.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.AtomicReference`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLite.Threading.AtomicReference`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.AtomicReference`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:NLite.Threading.AtomicReference`1.CompareAndSet(`0,`0)">
            <summary>
            Atomically sets the value to the given updated value if the current value == the expected value.
            </summary>
            <param name="expect"></param>
            <param name="update"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicReference`1.GetAndSet(`0)">
            <summary>
            Atomically sets to the given value and returns the old value.
            </summary>
            <param name="newValue"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicReference`1.op_Implicit(NLite.Threading.AtomicReference{`0})~`0">
            <summary>
            
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.AtomicReference`1.op_Implicit(`0)~NLite.Threading.AtomicReference{`0}">
            <summary>
            
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="P:NLite.Threading.AtomicReference`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.Barrier">
            <summary>
            轻量级栅栏
            </summary>
        </member>
        <member name="M:NLite.Threading.Barrier.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NLite.Threading.Barrier.Await">
            <summary>
            自动等待，当栅栏全部移除那么就不用等待，否则移除一个栅栏，然后再判断栅栏数量，
            如果栅栏数量不为0那么阻塞当前线程，否则继续执行
            </summary>
        </member>
        <member name="P:NLite.Threading.Barrier.CurrentCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.Collections.ConcurrentStack`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NLite.Threading.Collections.ConcurrentStack`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Collections.ConcurrentStack`1.Push(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NLite.Threading.Collections.ConcurrentStack`1.Pop">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.Collections.ConcurrentStack`1.Peek">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.Collections.ConcurrentStack`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.Collections.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NLite.Threading.CountDownLatch">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.CountDownLatch.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="count"></param>
        </member>
        <member name="M:NLite.Threading.CountDownLatch.Await">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.CountDownLatch.CountDown">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.CountDownLatch.Cancel">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Threading.CountDownLatch.IsCanceled">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Threading.CountDownLatch.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Threading.CountDownLatch.CurrentCount">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.IActiveObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.IActiveObject.AddCommand(NLite.ICommand)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="P:NLite.Threading.IActiveObject.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.Command">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Command.OnExecuting">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.Command.OnExecute">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Command.OnExecuted">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Command.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Threading.Command.Current">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.CompositeCommand">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.CompositeCommand.Add(NLite.ICommand)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:NLite.Threading.CompositeCommand.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.Internal.CompoisteCommandQueue">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Internal.CompoisteCommandQueue.Add(NLite.ICommand)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:NLite.Threading.Internal.CompoisteCommandQueue.Execute">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.ActiveObjectExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ActiveObjectExtensions.AddCommand(NLite.Threading.IActiveObject,System.Action)">
            <summary>
            
            </summary>
            <param name="activeObject"></param>
            <param name="command"></param>
        </member>
        <member name="T:NLite.Threading.ActiveObject">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ActiveObject.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ActiveObject.#ctor(System.String,NLite.ICompositeCommand)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="compositeCommand"></param>
        </member>
        <member name="M:NLite.Threading.ActiveObject.AddCommand(NLite.ICommand)">
            <summary>
            
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:NLite.Threading.ActiveObject.Start">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ActiveObject.Stop">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Threading.ActiveObject.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.Threading.ActiveObject.Interval">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.Local">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Local.Get(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.Local.Set(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:NLite.Threading.Local.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:NLite.Threading.Local.ContainsKey(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.Local.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Threading.Paraller">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.Paraller.For``1(``0[],System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="body"></param>
        </member>
        <member name="M:NLite.Threading.Paraller.For``1(``0[],System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="body"></param>
        </member>
        <member name="M:NLite.Threading.Paraller.For(System.Int32,System.Int32,System.Action{System.Int32})">
            <summary>
            
            </summary>
            <param name="fromInclusive"></param>
            <param name="toExclusive"></param>
            <param name="body"></param>
        </member>
        <member name="M:NLite.Threading.Paraller.For(System.Int32,System.Int32,System.Func{System.Int32,System.Boolean})">
            <summary>
            
            </summary>
            <param name="fromInclusive"></param>
            <param name="toExclusive"></param>
            <param name="body"></param>
        </member>
        <member name="M:NLite.Threading.Paraller.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="body"></param>
        </member>
        <member name="M:NLite.Threading.Paraller.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="body"></param>
        </member>
        <member name="T:NLite.Threading.ReadWriteLockSlimExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ReadWriteLockSlimExtensions.Readonly(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            
            </summary>
            <param name="sem"></param>
            <param name="a"></param>
        </member>
        <member name="M:NLite.Threading.ReadWriteLockSlimExtensions.Readonly``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sem"></param>
            <param name="f"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.ReadWriteLockSlimExtensions.Read(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            
            </summary>
            <param name="sem"></param>
            <param name="a"></param>
        </member>
        <member name="M:NLite.Threading.ReadWriteLockSlimExtensions.Write(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            
            </summary>
            <param name="sem"></param>
            <param name="a"></param>
        </member>
        <member name="T:NLite.Threading.ResetEvent">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ResetEvent.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="initialState"></param>
        </member>
        <member name="M:NLite.Threading.ResetEvent.Wait">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.ResetEvent.Wait(System.Int32)">
            <summary>
            
            </summary>
            <param name="millisecondsTimeout"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Threading.ResetEvent.Set">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Threading.ResetEvent.Reset">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Validation.IValidator">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.Validation.IValidator.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Validation.IValidator.Register(System.Type,System.Type)">
            <summary>
            注册运行时动态绑定校验
            </summary>
            <param name="entityType"></param>
            <param name="entityValidatorType"></param>
        </member>
        <member name="T:NLite.Validation.Validator">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Validation.Validator.Default">
            <summary>
            缺省检验器
            </summary>
        </member>
        <member name="M:NLite.Validation.Validator.Register(System.Type,System.Type)">
            <summary>
            注册运行时动态绑定校验
            </summary>
            <param name="entityType"></param>
            <param name="entityValidatorType"></param>
        </member>
        <member name="M:NLite.Validation.Validator.Register``2">
            <summary>
            注册运行时动态绑定校验
            </summary>
        </member>
        <member name="M:NLite.Validation.Validator.Validate(System.Object)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:NLite.Validation.Validator.Validate``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="T:NLite.IErrorItem">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.IErrorItem.Message">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.IErrorItem.Key">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.Validation.EntityValidatorAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="F:NLite.Validation.EntityValidatorAttribute.StrEntityValidatorType">
            
        </member>
        <member name="M:NLite.Validation.EntityValidatorAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="strEntityValidatorType"></param>
        </member>
        <member name="P:NLite.Validation.EntityValidatorAttribute.EntityValidatorType">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.IErrorState">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.IErrorState.AddError(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:NLite.IErrorState.AddError(System.String)">
            <summary>
            
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:NLite.IErrorState.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="T:NLite.ErrorState">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ErrorState.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:NLite.ErrorState.#ctor(System.Collections.Generic.IEnumerable{NLite.IErrorItem})">
            <summary>
            
            </summary>
            <param name="items"></param>
        </member>
        <member name="M:NLite.ErrorState.AddError(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <param name="errorMessage"></param>
        </member>
        <member name="M:NLite.ErrorState.AddError(System.String)">
            <summary>
            
            </summary>
            <param name="errorMessage"></param>
        </member>
        <member name="P:NLite.ErrorState.IsValid">
            <summary>
            
            </summary>
        </member>
        <member name="P:NLite.ErrorState.Empty">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
